{"version":3,"sources":["webpack:///fenix-ui-filter-utils.min.js","webpack:///webpack/bootstrap c59400948316f95b119e","webpack:///./src/js/index.js","webpack:///./src/config/errors.js","webpack:///./src/config/config.js","webpack:///external \"jquery\"","webpack:///external \"underscore\"","webpack:///external \"loglevel\"","webpack:///external \"handlebars\"","webpack:///external \"moment\""],"names":["define","__WEBPACK_EXTERNAL_MODULE_4__","__WEBPACK_EXTERNAL_MODULE_5__","__WEBPACK_EXTERNAL_MODULE_6__","__WEBPACK_EXTERNAL_MODULE_7__","__WEBPACK_EXTERNAL_MODULE_8__","modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","ERR","C","$","_","log","Handlebars","Moment","Utils","this","prototype","compileFilter","values","items","extend","config","formatConfig","format","template","output","compileTemplate","tmpl","key","dimension","toLocaleLowerCase","createTimeFilter","createEnumerationFilter","warn","model","cl","codes","join","error","uid","compile","process","JSON","parse","each","obj","version","v","time","valuesAreObject","from","findWhere","parent","to","couple","value","push","map","a","parseInt","sort","b","i","enumeration","cleanArray","actual","newArray","length","createConfiguration","o","info","configuration","_isFenixResource","metadata","dsd","columns","bind","contains","forbiddenSubjects","subject","exclude","endsWith","lang","toUpperCase","_processFxColumn","common","INVALID_FENIX_RESOURCE","mergeConfigurations","s","sync","toolbar","hasOwnProperty","selector","conf","_isFenixColumn","dataType","toLowerCase","_processCustomCodeColumn","_processEnumerationColumn","_processCodeColumn","_processDateColumn","_processMonthColumn","_processYearColumn","_processTimeColumn","_processTextColumn","_processLabelColumn","_processNumberColumn","_processPercentageColumn","_processBooleanColumn","UNKNOWN_FENIX_COLUMN_DATATYPE","INVALID_FENIX_COLUMN","_commonProcessColumn","_configTreeFromSource","domain","hideFilter","source","label","_configTreeFromDistinct","period","timelist","timeList","_configTimeFromPeriod","_configTreeFromTimelist","_configTemporalColumn","_configInput","type","title","Array","isArray","idCodeList","distinct","columnId","_configTreeFromCodelist","lazy","code","_configDropdownFromPeriod","_configTreeFromPeriod","_configDropdownFromTimelist","_getTimeFormat","_getTimeLabelFormat","_configDropdownFromSource","_configDropdownFromCodelist","String","_configRangeFromPeriod","min","max","prettify_enabled","defaultPeriodFrom","defaultPeriodTo","timeLabelFormat","res","valid","errors","resourceType","getNestedProperty","INVALID_METADATA","INVALID_DSD","INVALID_COLUMNS","INVALID_COLUMN_DATATYPE","path","arr","split","shift","assign","prop","e","Object","toString","apply","undefined","prefix"],"mappings":"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","file":"fenix-ui-filter-utils.min.js","sourcesContent":["define([\"jquery\",\"underscore\",\"loglevel\",\"handlebars\",\"moment\"], function(__WEBPACK_EXTERNAL_MODULE_4__, __WEBPACK_EXTERNAL_MODULE_5__, __WEBPACK_EXTERNAL_MODULE_6__, __WEBPACK_EXTERNAL_MODULE_7__, __WEBPACK_EXTERNAL_MODULE_8__) { return /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1);\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;if (false) {\n\t    var define = require('amdefine')(module);\n\t}\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n\t    __webpack_require__(2),\n\t    __webpack_require__(3),\n\t    __webpack_require__(4),\n\t    __webpack_require__(5),\n\t    __webpack_require__(6),\n\t    __webpack_require__(7),\n\t    __webpack_require__(8)\n\t], __WEBPACK_AMD_DEFINE_RESULT__ = function (ERR, C, $, _, log, Handlebars, Moment) {\n\t\n\t    'use strict';\n\t\n\t    function Utils() {\n\t\n\t        return this;\n\t    }\n\t\n\t    //FENIX\n\t\n\t    Utils.prototype.compileFilter = function (id, values, items) {\n\t\n\t        $.extend(true, this, C);\n\t\n\t        var config = items[id] || {},\n\t            formatConfig = config.format || {},\n\t            template = formatConfig.template,\n\t            output = formatConfig.output || \"codes\";\n\t\n\t        if (template) {\n\t            return this.compileTemplate(id, values, config, template);\n\t        }\n\t\n\t        var key = formatConfig.dimension || id,\n\t            tmpl;\n\t\n\t        switch (output.toLocaleLowerCase()) {\n\t            case \"codes\" :\n\t\n\t                tmpl = '{ \"codes\":[{\"uid\": \"{{{uid}}}\", \"version\": \"{{version}}\", \"codes\": [{{{codes}}}] } ]}';\n\t                return this.compileTemplate(id, values, config, key, tmpl);\n\t\n\t                break;\n\t            case \"time\" :\n\t\n\t                return this.createTimeFilter(id, values, config, key);\n\t                break;\n\t\n\t            case \"enumeration\" :\n\t\n\t                return this.createEnumerationFilter(id, values, config, key);\n\t                break;\n\t            default :\n\t                log.warn(id + \" not included in the result set. Missing format configuration.\");\n\t                return {};\n\t        }\n\t\n\t    };\n\t\n\t    Utils.prototype.compileTemplate = function (id, values, config, key, template) {\n\t\n\t        /*\n\t         Priority\n\t         - values\n\t         - format configuration\n\t         - code list configuration\n\t         */\n\t\n\t        var model = $.extend(true, config.cl, config.format, {codes: '\"' + values.join('\",\"') + '\"'});\n\t\n\t        if (!template) {\n\t            log.error(\"Impossible to find '\" + id + \"' process template. Check your '\" + id + \"'.filter.process configuration.\")\n\t        }\n\t\n\t        if (!model.uid) {\n\t            log.error(\"Impossible to find '\" + id + \"' code list configuration for FENIX output format export.\");\n\t            return;\n\t        }\n\t\n\t        var tmpl = Handlebars.compile(template),\n\t            process = JSON.parse(tmpl(model)),\n\t            codes = process.codes;\n\t\n\t        //Remove empty version attributes\n\t        _.each(codes, function (obj) {\n\t            if (!obj.version) {\n\t                delete obj.version;\n\t            }\n\t        });\n\t\n\t        return process;\n\t\n\t    };\n\t\n\t    Utils.prototype.createTimeFilter = function (id, values, config, key) {\n\t\n\t        var time = [],\n\t            valuesAreObject = typeof values[0] === 'object',\n\t            v;\n\t\n\t        if (valuesAreObject) {\n\t\n\t            var from = _.findWhere(values, {parent: \"from\"}) || {},\n\t                to = _.findWhere(values, {parent: \"to\"}) || {},\n\t                couple = {from: null, to: null};\n\t\n\t            couple.from = from.value;\n\t            couple.to = to.value;\n\t\n\t            time.push($.extend({}, couple));\n\t\n\t        } else {\n\t\n\t            v = values.map(function (a) {\n\t                return parseInt(a, 10);\n\t            }).sort(function (a, b) {\n\t                return a - b;\n\t            });\n\t\n\t\n\t            _.each(v, function (i) {\n\t                time.push({from: i, to: i});\n\t            });\n\t\n\t        }\n\t\n\t        return {time: time};\n\t    };\n\t\n\t    Utils.prototype.createEnumerationFilter = function (id, values, config, key) {\n\t\n\t        return {enumeration: values};\n\t\n\t    };\n\t\n\t    Utils.prototype.cleanArray = function (actual) {\n\t        var newArray = [];\n\t        for (var i = 0; i < actual.length; i++) {\n\t            if (actual[i]) {\n\t                newArray.push(actual[i]);\n\t            }\n\t        }\n\t        return newArray;\n\t    };\n\t\n\t    /* FILTER UTILS */\n\t\n\t    /**\n\t     * Creates a FENIX filter configuration from a\n\t     * FENIX resource\n\t     * @param {Object} o\n\t     * @return {Object} filter configuration\n\t     */\n\t    Utils.prototype.createConfiguration = function (o) {\n\t        log.info(\"Create filter configuration from:\");\n\t        log.info(o);\n\t\n\t        $.extend(true, this, C, o);\n\t\n\t        var configuration = {};\n\t\n\t        if (this._isFenixResource(o.model) === true) {\n\t            log.info(\"Valid resource\");\n\t\n\t            _.each(o.model.metadata.dsd.columns, _.bind(function (c) {\n\t\n\t                if (!_.contains(this.forbiddenSubjects, c.subject) && !_.contains(this.exclude, c.id) && !c.id.endsWith(\"_\" + this.lang.toUpperCase())) {\n\t                    configuration[c.id] = $.extend(true, {}, this._processFxColumn(c, o.model.metadata), this.common);\n\t                } else {\n\t                    log.warn(c.id + \" was excluded. [id: \" + c.id + \", subject: \" + c.subject + \"]\");\n\t                }\n\t\n\t            }, this));\n\t\n\t        } else {\n\t            log.error(ERR.INVALID_FENIX_RESOURCE);\n\t        }\n\t\n\t        return configuration;\n\t    };\n\t\n\t    /**\n\t     * Merges a FENIX filter configuration with\n\t     * default values\n\t     * @param {Object} config\n\t     * @param {Object} sync\n\t     * @return {Object} filter configuration\n\t     */\n\t    Utils.prototype.mergeConfigurations = function (config, s) {\n\t\n\t        var sync = s.toolbar ? s.toolbar : s;\n\t\n\t        if (sync) {\n\t\n\t            var values = sync.values;\n\t\n\t            _.each(values, _.bind(function (obj, key) {\n\t\n\t                if (config.hasOwnProperty(key)) {\n\t                    config[key].selector.default = values[key];\n\t                }\n\t\n\t            }, this));\n\t        }\n\t\n\t        return config;\n\t\n\t    };\n\t\n\t    // private fns\n\t\n\t    Utils.prototype._processFxColumn = function (c, metadata) {\n\t\n\t        var conf = {};\n\t\n\t        if (this._isFenixColumn(c) === true) {\n\t            log.info(\"Valid column with dataType: \" + c.dataType.toLowerCase() + \" [column.id = \" + c.id + \" ]\");\n\t\n\t            switch (c.dataType.toLowerCase()) {\n\t                case \"customcode\" :\n\t                    conf = this._processCustomCodeColumn(c);\n\t                    break;\n\t                case \"enumeration\" :\n\t                    conf = this._processEnumerationColumn(c);\n\t                    break;\n\t                case \"code\" :\n\t                    conf = this._processCodeColumn(c, metadata);\n\t                    break;\n\t                case \"date\" :\n\t                    conf = this._processDateColumn(c);\n\t                    break;\n\t                case \"month\" :\n\t                    conf = this._processMonthColumn(c);\n\t                    break;\n\t                case \"year\" :\n\t                    conf = this._processYearColumn(c);\n\t                    break;\n\t                case \"time\" :\n\t                    conf = this._processTimeColumn(c);\n\t                    break;\n\t                case \"text\" :\n\t                    conf = this._processTextColumn(c);\n\t                    break;\n\t                case \"label\" :\n\t                    conf = this._processLabelColumn(c);\n\t                    break;\n\t                case \"number\" :\n\t                    conf = this._processNumberColumn(c);\n\t                    break;\n\t                case \"percentage\" :\n\t                    conf = this._processPercentageColumn(c);\n\t                    break;\n\t                case \"bool\" :\n\t                    conf = this._processBooleanColumn(c);\n\t                    break;\n\t                default:\n\t                    log.error(ERR.UNKNOWN_FENIX_COLUMN_DATATYPE, c.dataType.toLowerCase());\n\t\n\t            }\n\t        } else {\n\t            log.error(ERR.INVALID_FENIX_COLUMN);\n\t        }\n\t\n\t        return $.extend(true, {}, conf, this._commonProcessColumn(c));\n\t    };\n\t\n\t    /* processes for CODE FX column */\n\t\n\t    Utils.prototype._processCustomCodeColumn = function (c) {\n\t        return this._configTreeFromSource(c);\n\t        //return this._configDropdownFromSource(c);\n\t    };\n\t\n\t    Utils.prototype._processEnumerationColumn = function (c) {\n\t\n\t        var config = {},\n\t            domain = c.domain || {},\n\t            enumeration = domain.enumeration || [];\n\t\n\t        //configure selector\n\t        //html selector configuration\n\t        config.selector = {};\n\t        config.selector.id = \"tree\";\n\t        config.selector.hideFilter = true;\n\t        config.selector.source = _.map(enumeration, function (obj) {\n\t            return {\n\t                value: obj,\n\t                label: obj\n\t            }\n\t        });\n\t\n\t        return config;\n\t    };\n\t\n\t    Utils.prototype._processCodeColumn = function (c, metadata) {\n\t\n\t        return this._configTreeFromDistinct(c, metadata);\n\t        //return this._configTreeFromCodelist(c);\n\t        //return this._configDropdownFromCodelist(c);\n\t\n\t    };\n\t\n\t    /* processes for TIME FX column */\n\t\n\t    Utils.prototype._processDateColumn = function (c) {\n\t\n\t        var domain = c.domain || {},\n\t            period = domain.period,\n\t            timelist = domain.timeList;\n\t\n\t        if (period && period.from && period.to) {\n\t            //return this._configRangeFromPeriod(c);\n\t            return this._configTimeFromPeriod(c);\n\t            //return this._configDropdownFromPeriod(c);\n\t        }\n\t\n\t        if (timelist) {\n\t            //return this._configDropdownFromTimelist(c);\n\t            return this._configTreeFromTimelist(c);\n\t        }\n\t\n\t        log.warn(\"Impossible to find process for column \" + c.id);\n\t\n\t        return {};\n\t\n\t    };\n\t\n\t    Utils.prototype._processMonthColumn = function (c) {\n\t\n\t        return this._configTemporalColumn(c);\n\t    };\n\t\n\t    Utils.prototype._processYearColumn = function (c) {\n\t\n\t        return this._configTemporalColumn(c);\n\t    };\n\t\n\t    Utils.prototype._processTimeColumn = function (c) {\n\t\n\t        return this._configTemporalColumn(c);\n\t\n\t    };\n\t\n\t    /* processes for TEXT FX column */\n\t\n\t    Utils.prototype._processTextColumn = function (c) {\n\t\n\t        return this._configInput(c, {type: \"text\"});\n\t    };\n\t\n\t    Utils.prototype._processLabelColumn = function (c) {\n\t\n\t        return this._configInput(c, {type: \"text\"});\n\t    };\n\t\n\t    /* processes for OTHER FX column */\n\t\n\t    Utils.prototype._processNumberColumn = function (c) {\n\t\n\t        return this._configInput(c, {type: \"number\", output: \"time\"});\n\t    };\n\t\n\t    Utils.prototype._processPercentageColumn = function (c) {\n\t        log.warn(\"TODO process\");\n\t    };\n\t\n\t    Utils.prototype._processBooleanColumn = function (c) {\n\t        return this._configInput(c, {type: \"checkbox\"});\n\t\n\t    };\n\t\n\t    /* Common processes */\n\t\n\t    Utils.prototype._commonProcessColumn = function (c) {\n\t\n\t        var config = {\n\t            template: {},\n\t            format: {\n\t                dimension: c.id\n\t            }\n\t        };\n\t\n\t        if (c.title && c.title[this.lang.toUpperCase()]) {\n\t            config.template.title = c.title[this.lang.toUpperCase()];\n\t        }\n\t\n\t        return config;\n\t    };\n\t\n\t    Utils.prototype._configTreeFromDistinct = function (c, metadata) {\n\t\n\t        var config = {},\n\t            domain = c.domain || {},\n\t            codes = domain.codes,\n\t            cl;\n\t\n\t        if (!Array.isArray(codes) || codes.length > 1) {\n\t            log.warn(\"Invalid domain.codes attributes\");\n\t        }\n\t\n\t        cl = codes[0];\n\t\n\t        if (!cl.idCodeList) {\n\t            log.error(\"Impossible to find idCodeList\");\n\t        }\n\t\n\t        //configure code list\n\t        config.distinct = {\n\t            uid : metadata.uid,\n\t            version : metadata.version,\n\t            columnId :c.id\n\t        };\n\t\n\t        //configure selector\n\t        //html selector configuration\n\t        config.selector = {};\n\t        config.selector.id = \"tree\";\n\t        //config.selector.lazy = true;\n\t        //config.selector.hideFilter = true;\n\t\n\t        return config;\n\t\n\t    };\n\t\n\t    Utils.prototype._configTreeFromCodelist = function (c) {\n\t\n\t        var config = {},\n\t            domain = c.domain || {},\n\t            codes = domain.codes,\n\t            cl;\n\t\n\t        if (!Array.isArray(codes) || codes.length > 1) {\n\t            log.warn(\"Invalid domain.codes attributes\");\n\t        }\n\t\n\t        cl = codes[0];\n\t\n\t        if (!cl.idCodeList) {\n\t            log.error(\"Impossible to find idCodeList\");\n\t        }\n\t\n\t        //configure code list\n\t        config.cl = {};\n\t        config.cl.uid = cl.idCodeList;\n\t        config.cl.version = cl.version;\n\t\n\t        //configure selector\n\t        //html selector configuration\n\t        config.selector = {};\n\t        config.selector.id = \"tree\";\n\t        config.selector.lazy = true;\n\t        config.selector.hideFilter = true;\n\t\n\t        return config;\n\t\n\t    };\n\t\n\t    Utils.prototype._configTreeFromSource = function (c) {\n\t\n\t        var config = {},\n\t            domain = c.domain || {},\n\t            codes = domain.codes,\n\t            cl;\n\t\n\t        if (!Array.isArray(codes) || codes.length > 1) {\n\t            log.warn(\"Invalid domain.codes attributes\");\n\t        }\n\t\n\t        cl = codes[0];\n\t\n\t        if (!cl.codes) {\n\t            log.error(\"Impossible to find codes\");\n\t        }\n\t\n\t        //configure selector\n\t        //html selector configuration\n\t        config.selector = {};\n\t        config.selector.id = \"tree\";\n\t        config.selector.source = _.map(cl.codes, _.bind(function (obj) {\n\t            return {\n\t                value: obj.code,\n\t                label: obj.label[this.lang.toUpperCase()]\n\t            }\n\t        }, this));\n\t        config.selector.hideFilter = true;\n\t\n\t        return config;\n\t\n\t    };\n\t\n\t    Utils.prototype._configDropdownFromPeriod = function (c) {\n\t\n\t        var config = {},\n\t            domain = c.domain || {},\n\t            period = domain.period;\n\t\n\t        //configure selector\n\t        //html selector configuration\n\t        config.selector = {};\n\t        config.selector.id = \"dropdown\";\n\t        config.selector.from = period.from;\n\t        config.selector.to = period.to;\n\t\n\t        return config;\n\t\n\t    };\n\t\n\t    Utils.prototype._configTreeFromPeriod = function (c) {\n\t\n\t        var config = {},\n\t            domain = c.domain || {},\n\t            period = domain.period;\n\t\n\t        //configure selector\n\t        //html selector configuration\n\t        config.selector = {};\n\t        config.selector.id = \"tree\";\n\t        config.selector.from = period.from;\n\t        config.selector.to = period.to;\n\t        config.selector.hideFilter = true;\n\t\n\t        return config;\n\t\n\t    };\n\t\n\t    Utils.prototype._configDropdownFromTimelist = function (c) {\n\t\n\t        var config = {},\n\t            domain = c.domain || {},\n\t            timelist = domain.timeList || [],\n\t            format = this._getTimeFormat(timelist[0]);\n\t\n\t        //configure selector\n\t        config.selector = {};\n\t        config.selector.id = \"dropdown\";\n\t        config.selector.source = _.map(timelist, _.bind(function (obj) {\n\t            return {\n\t                value: obj,\n\t                label: new Moment(obj, format).format(this._getTimeLabelFormat(obj))\n\t            }\n\t        }, this));\n\t\n\t        return config;\n\t\n\t    };\n\t\n\t    Utils.prototype._configTreeFromTimelist = function (c) {\n\t\n\t        var config = {},\n\t            domain = c.domain || {},\n\t            timelist = domain.timeList || [],\n\t            format = this._getTimeFormat(timelist[0]);\n\t\n\t        //configure selector\n\t        config.selector = {};\n\t        config.selector.id = \"tree\";\n\t        config.selector.source = _.map(timelist, _.bind(function (obj) {\n\t            return {\n\t                value: obj,\n\t                label: new Moment(obj, format).format(this._getTimeLabelFormat(obj))\n\t            }\n\t        }, this));\n\t        config.selector.hideFilter = true;\n\t\n\t        return config;\n\t\n\t    };\n\t\n\t    Utils.prototype._configDropdownFromSource = function (c) {\n\t\n\t        var config = {},\n\t            domain = c.domain || {},\n\t            codes = domain.codes,\n\t            cl;\n\t\n\t        if (!Array.isArray(codes) || codes.length > 1) {\n\t            log.warn(\"Invalid domain.codes attributes\");\n\t        }\n\t\n\t        cl = codes[0];\n\t\n\t        if (!cl.codes) {\n\t            log.error(\"Impossible to find codes\");\n\t        }\n\t\n\t        //configure selector\n\t        //html selector configuration\n\t        config.selector = {};\n\t        config.selector.id = \"dropdown\";\n\t        config.selector.source = _.map(cl.codes, _.bind(function (obj) {\n\t            return {\n\t                value: obj.code,\n\t                label: obj.label[this.lang.toUpperCase()]\n\t            }\n\t        }, this));\n\t\n\t        return config;\n\t\n\t    };\n\t\n\t    Utils.prototype._configDropdownFromCodelist = function (c) {\n\t\n\t        var config = {},\n\t            domain = c.domain || {},\n\t            codes = domain.codes,\n\t            cl;\n\t\n\t        if (!Array.isArray(codes) || codes.length > 1) {\n\t            log.warn(\"Invalid domain.codes attributes\");\n\t        }\n\t\n\t        cl = codes[0];\n\t\n\t        if (!cl.idCodeList) {\n\t            log.error(\"Impossible to find idCodeList\");\n\t        }\n\t\n\t        //configure code list\n\t        config.cl = {};\n\t        config.cl.uid = cl.idCodeList;\n\t        config.cl.version = cl.version;\n\t\n\t        //configure selector\n\t        //html selector configuration\n\t        config.selector = {};\n\t        config.selector.id = \"dropdown\";\n\t\n\t        return config;\n\t\n\t    };\n\t\n\t    Utils.prototype._configTimeFromPeriod = function (c) {\n\t\n\t        /* ~~~~~~ Selector time\n\t         var config = {},\n\t         domain = c.domain || {},\n\t         period = domain.period,\n\t         from = String(period.from),\n\t         to = String(period.to),\n\t         //from = String(period.from).substring(0, String(period.from).length - 2),\n\t         //to = String(period.to).substring(0, String(period.to).length - 2),\n\t         format = this._getTimeFormat(from);\n\t\n\t         //configure selector\n\t         config.selector = {\n\t         config: {}\n\t         };\n\t         config.selector.id = \"time\";\n\t         config.selector.config.minDate = new Moment(from, format);\n\t         config.selector.config.maxDate = new Moment(to, format);\n\t         config.selector.config.format = this._getTimeLabelFormat(from);\n\t\n\t         if (from.length < 5) {\n\t         config.selector.config.viewMode = \"years\";\n\t         }\n\t\n\t         config.format = {\n\t         output : \"time\"\n\t         };\n\t         */\n\t\n\t        var config = {},\n\t            domain = c.domain || {},\n\t            period = domain.period,\n\t            from = String(period.from),\n\t            to = String(period.to);\n\t\n\t        //configure selector\n\t        config.selector = {\n\t            config: {}\n\t        };\n\t\n\t        config.selector.id = \"tree\";\n\t        config.selector.from = parseInt(from, 10);\n\t        config.selector.to = parseInt(to, 10);\n\t        config.selector.hideFilter = true;\n\t        config.format = {\n\t            output: \"time\"\n\t        };\n\t\n\t        return config;\n\t    };\n\t\n\t    Utils.prototype._configRangeFromPeriod = function (c) {\n\t\n\t        var config = {},\n\t            domain = c.domain || {},\n\t            period = domain.period;\n\t\n\t        //configure selector\n\t        config.selector = {\n\t            config: {}\n\t        };\n\t\n\t        config.selector.id = \"range\";\n\t        config.selector.config.min = period.from;\n\t        config.selector.config.max = period.to;\n\t        config.selector.config.type = \"double\";\n\t        config.selector.config.prettify_enabled = false;\n\t\n\t        return config;\n\t\n\t    };\n\t\n\t    Utils.prototype._configInput = function (c, o) {\n\t\n\t        var config = {\n\t            selector: {},\n\t            format: {\n\t                output: o.output || \"enumeration\"\n\t            }\n\t        };\n\t\n\t        config.selector.id = \"input\";\n\t        config.selector.type = o.type || \"text\";\n\t\n\t        return config;\n\t    };\n\t\n\t    Utils.prototype._configTemporalColumn = function (c) {\n\t\n\t        var domain = c.domain || {},\n\t            period = domain.period,\n\t            timelist = domain.timeList;\n\t\n\t        if (period && period.from && period.to) {\n\t            //return this._configRangeFromPeriod(c);\n\t            //return this._configTimeFromPeriod(c);\n\t            //return this._configDropdownFromPeriod(c);\n\t            return this._configTreeFromPeriod(c);\n\t        }\n\t\n\t        if (timelist) {\n\t            //return this._configDropdownFromTimelist(c);\n\t            return this._configTreeFromTimelist(c);\n\t        }\n\t\n\t        //Default set year range\n\t        log.warn(\"Column \" + c.id + \" set with default time period range.\");\n\t\n\t        c.domain = {\n\t            period: {\n\t                from: C.defaultPeriodFrom,\n\t                to: C.defaultPeriodTo\n\t            }\n\t        };\n\t\n\t        return this._configTimeFromPeriod(c);\n\t    };\n\t\n\t    Utils.prototype._getTimeFormat = function (s) {\n\t\n\t        var format;\n\t\n\t        switch (String(s).length) {\n\t            case 4 :\n\t                format = \"YYYY\";\n\t                break;\n\t            case 6:\n\t                format = \"YYYY MM\";\n\t                break;\n\t            case 8:\n\t                format = \"YYYY MM DD\";\n\t                break;\n\t            case 12:\n\t                format = \"YYYY MM DD hh mm\";\n\t                break;\n\t            case 14:\n\t                format = \"YYYY MM DD hh mm ss\";\n\t                break;\n\t            default:\n\t                log.warn(\"Impossible to find time format for: \" + format);\n\t        }\n\t\n\t        return format;\n\t\n\t    };\n\t\n\t    Utils.prototype._getTimeLabelFormat = function (s) {\n\t\n\t        if (this.timeLabelFormat) {\n\t            return this.timeLabelFormat;\n\t        }\n\t\n\t        var format;\n\t\n\t        switch (String(s).length) {\n\t            case 4 :\n\t                format = \"YYYY\";\n\t                break;\n\t            case 6:\n\t                format = \"L\";\n\t                break;\n\t            case 8:\n\t                format = \"L\";\n\t                break;\n\t            case 14:\n\t                format = \"lll\";\n\t                break;\n\t            default:\n\t                log.warn(\"Impossible to find time label format for: \" + format);\n\t        }\n\t\n\t        return format;\n\t\n\t    };\n\t\n\t    /*   /!* Revert Process *!/\n\t     /!**\n\t     * Extracts a blank selection from FENIX process\n\t     * default values\n\t     * @param {Object} filter\n\t     * @return {Object} filter configuration\n\t     *!/\n\t     Utils.prototype.revertProcess = function (filter) {\n\t\n\t     var configuration = {};\n\t\n\t     if (Array.isArray(filter)) {\n\t\n\t     _.each(filter, _.bind(function ( step ) {\n\t\n\t     var fn = \"_revert_\" + step.name;\n\t\n\t     if ( $.isFunction(this[fn]) && step.parameters) {\n\t     configuration[step.name] = _.extend( this[fn](step));\n\t     } else {\n\t     log.error(fn + \" is not a valid reverse function\");\n\t     }\n\t\n\t     }, this));\n\t     }\n\t\n\t     return configuration;\n\t\n\t     };\n\t\n\t     Utils.prototype._revert_filter = function (step) {\n\t     log.info(\"_revert_filter \" + JSON.stringify(step));\n\t\n\t     var self = this,\n\t     result = {},\n\t     parameters = step.parameters,\n\t     rows = parameters.rows,\n\t     columns = parameters.columns;\n\t\n\t     _.each(rows, function ( obj , key) {\n\t\n\t     if ( obj.time ) {\n\t     result[key] = self._revert_time_row(obj);\n\t     } else {\n\t     result[key] = self._revert_codes_row(obj);\n\t     }\n\t\n\t     });\n\t\n\t     return result;\n\t     };\n\t\n\t     Utils.prototype._revert_time_row = function ( step ) {\n\t\n\t     console.log(step)\n\t\n\t     };\n\t\n\t     Utils.prototype._revert_codes_row = function ( step ) {\n\t\n\t     console.log(step)\n\t\n\t\n\t     };\n\t\n\t     Utils.prototype._revert_group = function (step) {\n\t     log.info(\"_revert_group \" + JSON.stringify(step));\n\t\n\t\n\t     return;\n\t     };\n\t\n\t     Utils.prototype._revert_order = function (step) {\n\t     log.info(\"_revert_order \" + JSON.stringify(step));\n\t\n\t     return;\n\t     };\n\t     */\n\t    /* Validation */\n\t\n\t    Utils.prototype._isFenixResource = function (res) {\n\t\n\t        var valid = true,\n\t            errors = [],\n\t            resourceType = this.getNestedProperty(\"metadata.meContent.resourceRepresentationType\", res);\n\t\n\t        if (!res.hasOwnProperty(\"metadata\")) {\n\t            errors.push({code: ERR.INVALID_METADATA});\n\t            valid = false;\n\t        }\n\t\n\t        if (valid && !res.metadata.hasOwnProperty(\"dsd\")) {\n\t            errors.push({code: ERR.INVALID_DSD});\n\t            valid = false;\n\t        }\n\t\n\t        //NOT need field for FENIX GEOGRAPHIC RESOURCE\n\t        if (resourceType === \"dataset\" && valid && (!res.metadata.dsd.hasOwnProperty(\"columns\") || !Array.isArray(res.metadata.dsd.columns))) {\n\t            errors.push({code: ERR.INVALID_COLUMNS});\n\t        }\n\t\n\t        return errors.length > 0 ? errors : valid;\n\t    };\n\t\n\t    Utils.prototype._isFenixColumn = function (c) {\n\t\n\t        var valid = true,\n\t            errors = [];\n\t\n\t        if (!c.hasOwnProperty(\"dataType\")) {\n\t            errors.push({code: ERR.INVALID_COLUMN_DATATYPE});\n\t            valid = false;\n\t        }\n\t\n\t        return errors.length > 0 ? errors : valid;\n\t    };\n\t\n\t    Utils.prototype.getNestedProperty = function (path, obj) {\n\t\n\t        var obj = _.extend({}, obj),\n\t            arr = path.split(\".\");\n\t\n\t        while (arr.length && (obj = obj[arr.shift()]));\n\t\n\t        return obj;\n\t\n\t    };\n\t\n\t\n\t    Utils.prototype.assign = function (obj, prop, value) {\n\t        if (typeof prop === \"string\")\n\t            prop = prop.split(\".\");\n\t\n\t        if (prop.length > 1) {\n\t            var e = prop.shift();\n\t            this.assign(obj[e] =\n\t                    Object.prototype.toString.call(obj[e]) === \"[object Object]\"\n\t                        ? obj[e]\n\t                        : {},\n\t                prop,\n\t                value);\n\t        } else {\n\t            obj[prop[0]] = value;\n\t        }\n\t    };\n\t\n\t    Utils.prototype.getNestedProperty = function (path, obj) {\n\t\n\t        var obj = _.extend({}, obj),\n\t            arr = path.split(\".\");\n\t\n\t        while (arr.length && (obj = obj[arr.shift()]));\n\t\n\t        return obj;\n\t\n\t    };\n\t\n\t\n\t    return new Utils();\n\t\n\t\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;if (false) {\n\t    var define = require('amdefine')(module);\n\t}\n\t\n\t!(__WEBPACK_AMD_DEFINE_RESULT__ = function ( ) {\n\t\n\t    'use strict';\n\t\n\t    var prefix = \"\";\n\t\n\t    return {\n\t\n\t        //Utils\n\t        INVALID_FENIX_RESOURCE: prefix + \"invalid_fenix_resource\",\n\t        INVALID_METADATA: prefix + \"invalid_metadata\",\n\t        INVALID_DSD: prefix + \"invalid_dsd\",\n\t        INVALID_COLUMNS: prefix + \"invalid_dsd\",\n\t        INVALID_FENIX_COLUMN: prefix + \"invalid_fenix_column\",\n\t        INVALID_COLUMN_DATATYPE : prefix + \"invalid_column_datatype\",\n\t        UNKNOWN_FENIX_COLUMN_DATATYPE :prefix + \"unknown_fenix_column_datatype\",\n\t\n\t    };\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;if (false) {\n\t    var define = require('amdefine')(module);\n\t}\n\t\n\t!(__WEBPACK_AMD_DEFINE_RESULT__ = function () {\n\t\n\t    'use strict';\n\t\n\t    return {\n\t\n\t        forbiddenSubjects: [\"value\"],\n\t        exclude: [], //exclude id\n\t        common: {},\n\t        lang: 'EN',\n\t        defaultPeriodFrom: 1970,\n\t        defaultPeriodTo: 2017\n\t\n\t    }\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ },\n/* 4 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_4__;\n\n/***/ },\n/* 5 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_5__;\n\n/***/ },\n/* 6 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_6__;\n\n/***/ },\n/* 7 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_7__;\n\n/***/ },\n/* 8 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_8__;\n\n/***/ }\n/******/ ])});;\n\n\n/** WEBPACK FOOTER **\n ** fenix-ui-filter-utils.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap c59400948316f95b119e\n **/","if (typeof define !== 'function') {\n    var define = require('amdefine')(module);\n}\ndefine([\n    '../config/errors',\n    '../config/config',\n    'jquery',\n    'underscore',\n    'loglevel',\n    'handlebars',\n    'moment'\n], function (ERR, C, $, _, log, Handlebars, Moment) {\n\n    'use strict';\n\n    function Utils() {\n\n        return this;\n    }\n\n    //FENIX\n\n    Utils.prototype.compileFilter = function (id, values, items) {\n\n        $.extend(true, this, C);\n\n        var config = items[id] || {},\n            formatConfig = config.format || {},\n            template = formatConfig.template,\n            output = formatConfig.output || \"codes\";\n\n        if (template) {\n            return this.compileTemplate(id, values, config, template);\n        }\n\n        var key = formatConfig.dimension || id,\n            tmpl;\n\n        switch (output.toLocaleLowerCase()) {\n            case \"codes\" :\n\n                tmpl = '{ \"codes\":[{\"uid\": \"{{{uid}}}\", \"version\": \"{{version}}\", \"codes\": [{{{codes}}}] } ]}';\n                return this.compileTemplate(id, values, config, key, tmpl);\n\n                break;\n            case \"time\" :\n\n                return this.createTimeFilter(id, values, config, key);\n                break;\n\n            case \"enumeration\" :\n\n                return this.createEnumerationFilter(id, values, config, key);\n                break;\n            default :\n                log.warn(id + \" not included in the result set. Missing format configuration.\");\n                return {};\n        }\n\n    };\n\n    Utils.prototype.compileTemplate = function (id, values, config, key, template) {\n\n        /*\n         Priority\n         - values\n         - format configuration\n         - code list configuration\n         */\n\n        var model = $.extend(true, config.cl, config.format, {codes: '\"' + values.join('\",\"') + '\"'});\n\n        if (!template) {\n            log.error(\"Impossible to find '\" + id + \"' process template. Check your '\" + id + \"'.filter.process configuration.\")\n        }\n\n        if (!model.uid) {\n            log.error(\"Impossible to find '\" + id + \"' code list configuration for FENIX output format export.\");\n            return;\n        }\n\n        var tmpl = Handlebars.compile(template),\n            process = JSON.parse(tmpl(model)),\n            codes = process.codes;\n\n        //Remove empty version attributes\n        _.each(codes, function (obj) {\n            if (!obj.version) {\n                delete obj.version;\n            }\n        });\n\n        return process;\n\n    };\n\n    Utils.prototype.createTimeFilter = function (id, values, config, key) {\n\n        var time = [],\n            valuesAreObject = typeof values[0] === 'object',\n            v;\n\n        if (valuesAreObject) {\n\n            var from = _.findWhere(values, {parent: \"from\"}) || {},\n                to = _.findWhere(values, {parent: \"to\"}) || {},\n                couple = {from: null, to: null};\n\n            couple.from = from.value;\n            couple.to = to.value;\n\n            time.push($.extend({}, couple));\n\n        } else {\n\n            v = values.map(function (a) {\n                return parseInt(a, 10);\n            }).sort(function (a, b) {\n                return a - b;\n            });\n\n\n            _.each(v, function (i) {\n                time.push({from: i, to: i});\n            });\n\n        }\n\n        return {time: time};\n    };\n\n    Utils.prototype.createEnumerationFilter = function (id, values, config, key) {\n\n        return {enumeration: values};\n\n    };\n\n    Utils.prototype.cleanArray = function (actual) {\n        var newArray = [];\n        for (var i = 0; i < actual.length; i++) {\n            if (actual[i]) {\n                newArray.push(actual[i]);\n            }\n        }\n        return newArray;\n    };\n\n    /* FILTER UTILS */\n\n    /**\n     * Creates a FENIX filter configuration from a\n     * FENIX resource\n     * @param {Object} o\n     * @return {Object} filter configuration\n     */\n    Utils.prototype.createConfiguration = function (o) {\n        log.info(\"Create filter configuration from:\");\n        log.info(o);\n\n        $.extend(true, this, C, o);\n\n        var configuration = {};\n\n        if (this._isFenixResource(o.model) === true) {\n            log.info(\"Valid resource\");\n\n            _.each(o.model.metadata.dsd.columns, _.bind(function (c) {\n\n                if (!_.contains(this.forbiddenSubjects, c.subject) && !_.contains(this.exclude, c.id) && !c.id.endsWith(\"_\" + this.lang.toUpperCase())) {\n                    configuration[c.id] = $.extend(true, {}, this._processFxColumn(c, o.model.metadata), this.common);\n                } else {\n                    log.warn(c.id + \" was excluded. [id: \" + c.id + \", subject: \" + c.subject + \"]\");\n                }\n\n            }, this));\n\n        } else {\n            log.error(ERR.INVALID_FENIX_RESOURCE);\n        }\n\n        return configuration;\n    };\n\n    /**\n     * Merges a FENIX filter configuration with\n     * default values\n     * @param {Object} config\n     * @param {Object} sync\n     * @return {Object} filter configuration\n     */\n    Utils.prototype.mergeConfigurations = function (config, s) {\n\n        var sync = s.toolbar ? s.toolbar : s;\n\n        if (sync) {\n\n            var values = sync.values;\n\n            _.each(values, _.bind(function (obj, key) {\n\n                if (config.hasOwnProperty(key)) {\n                    config[key].selector.default = values[key];\n                }\n\n            }, this));\n        }\n\n        return config;\n\n    };\n\n    // private fns\n\n    Utils.prototype._processFxColumn = function (c, metadata) {\n\n        var conf = {};\n\n        if (this._isFenixColumn(c) === true) {\n            log.info(\"Valid column with dataType: \" + c.dataType.toLowerCase() + \" [column.id = \" + c.id + \" ]\");\n\n            switch (c.dataType.toLowerCase()) {\n                case \"customcode\" :\n                    conf = this._processCustomCodeColumn(c);\n                    break;\n                case \"enumeration\" :\n                    conf = this._processEnumerationColumn(c);\n                    break;\n                case \"code\" :\n                    conf = this._processCodeColumn(c, metadata);\n                    break;\n                case \"date\" :\n                    conf = this._processDateColumn(c);\n                    break;\n                case \"month\" :\n                    conf = this._processMonthColumn(c);\n                    break;\n                case \"year\" :\n                    conf = this._processYearColumn(c);\n                    break;\n                case \"time\" :\n                    conf = this._processTimeColumn(c);\n                    break;\n                case \"text\" :\n                    conf = this._processTextColumn(c);\n                    break;\n                case \"label\" :\n                    conf = this._processLabelColumn(c);\n                    break;\n                case \"number\" :\n                    conf = this._processNumberColumn(c);\n                    break;\n                case \"percentage\" :\n                    conf = this._processPercentageColumn(c);\n                    break;\n                case \"bool\" :\n                    conf = this._processBooleanColumn(c);\n                    break;\n                default:\n                    log.error(ERR.UNKNOWN_FENIX_COLUMN_DATATYPE, c.dataType.toLowerCase());\n\n            }\n        } else {\n            log.error(ERR.INVALID_FENIX_COLUMN);\n        }\n\n        return $.extend(true, {}, conf, this._commonProcessColumn(c));\n    };\n\n    /* processes for CODE FX column */\n\n    Utils.prototype._processCustomCodeColumn = function (c) {\n        return this._configTreeFromSource(c);\n        //return this._configDropdownFromSource(c);\n    };\n\n    Utils.prototype._processEnumerationColumn = function (c) {\n\n        var config = {},\n            domain = c.domain || {},\n            enumeration = domain.enumeration || [];\n\n        //configure selector\n        //html selector configuration\n        config.selector = {};\n        config.selector.id = \"tree\";\n        config.selector.hideFilter = true;\n        config.selector.source = _.map(enumeration, function (obj) {\n            return {\n                value: obj,\n                label: obj\n            }\n        });\n\n        return config;\n    };\n\n    Utils.prototype._processCodeColumn = function (c, metadata) {\n\n        return this._configTreeFromDistinct(c, metadata);\n        //return this._configTreeFromCodelist(c);\n        //return this._configDropdownFromCodelist(c);\n\n    };\n\n    /* processes for TIME FX column */\n\n    Utils.prototype._processDateColumn = function (c) {\n\n        var domain = c.domain || {},\n            period = domain.period,\n            timelist = domain.timeList;\n\n        if (period && period.from && period.to) {\n            //return this._configRangeFromPeriod(c);\n            return this._configTimeFromPeriod(c);\n            //return this._configDropdownFromPeriod(c);\n        }\n\n        if (timelist) {\n            //return this._configDropdownFromTimelist(c);\n            return this._configTreeFromTimelist(c);\n        }\n\n        log.warn(\"Impossible to find process for column \" + c.id);\n\n        return {};\n\n    };\n\n    Utils.prototype._processMonthColumn = function (c) {\n\n        return this._configTemporalColumn(c);\n    };\n\n    Utils.prototype._processYearColumn = function (c) {\n\n        return this._configTemporalColumn(c);\n    };\n\n    Utils.prototype._processTimeColumn = function (c) {\n\n        return this._configTemporalColumn(c);\n\n    };\n\n    /* processes for TEXT FX column */\n\n    Utils.prototype._processTextColumn = function (c) {\n\n        return this._configInput(c, {type: \"text\"});\n    };\n\n    Utils.prototype._processLabelColumn = function (c) {\n\n        return this._configInput(c, {type: \"text\"});\n    };\n\n    /* processes for OTHER FX column */\n\n    Utils.prototype._processNumberColumn = function (c) {\n\n        return this._configInput(c, {type: \"number\", output: \"time\"});\n    };\n\n    Utils.prototype._processPercentageColumn = function (c) {\n        log.warn(\"TODO process\");\n    };\n\n    Utils.prototype._processBooleanColumn = function (c) {\n        return this._configInput(c, {type: \"checkbox\"});\n\n    };\n\n    /* Common processes */\n\n    Utils.prototype._commonProcessColumn = function (c) {\n\n        var config = {\n            template: {},\n            format: {\n                dimension: c.id\n            }\n        };\n\n        if (c.title && c.title[this.lang.toUpperCase()]) {\n            config.template.title = c.title[this.lang.toUpperCase()];\n        }\n\n        return config;\n    };\n\n    Utils.prototype._configTreeFromDistinct = function (c, metadata) {\n\n        var config = {},\n            domain = c.domain || {},\n            codes = domain.codes,\n            cl;\n\n        if (!Array.isArray(codes) || codes.length > 1) {\n            log.warn(\"Invalid domain.codes attributes\");\n        }\n\n        cl = codes[0];\n\n        if (!cl.idCodeList) {\n            log.error(\"Impossible to find idCodeList\");\n        }\n\n        //configure code list\n        config.distinct = {\n            uid : metadata.uid,\n            version : metadata.version,\n            columnId :c.id\n        };\n\n        //configure selector\n        //html selector configuration\n        config.selector = {};\n        config.selector.id = \"tree\";\n        //config.selector.lazy = true;\n        //config.selector.hideFilter = true;\n\n        return config;\n\n    };\n\n    Utils.prototype._configTreeFromCodelist = function (c) {\n\n        var config = {},\n            domain = c.domain || {},\n            codes = domain.codes,\n            cl;\n\n        if (!Array.isArray(codes) || codes.length > 1) {\n            log.warn(\"Invalid domain.codes attributes\");\n        }\n\n        cl = codes[0];\n\n        if (!cl.idCodeList) {\n            log.error(\"Impossible to find idCodeList\");\n        }\n\n        //configure code list\n        config.cl = {};\n        config.cl.uid = cl.idCodeList;\n        config.cl.version = cl.version;\n\n        //configure selector\n        //html selector configuration\n        config.selector = {};\n        config.selector.id = \"tree\";\n        config.selector.lazy = true;\n        config.selector.hideFilter = true;\n\n        return config;\n\n    };\n\n    Utils.prototype._configTreeFromSource = function (c) {\n\n        var config = {},\n            domain = c.domain || {},\n            codes = domain.codes,\n            cl;\n\n        if (!Array.isArray(codes) || codes.length > 1) {\n            log.warn(\"Invalid domain.codes attributes\");\n        }\n\n        cl = codes[0];\n\n        if (!cl.codes) {\n            log.error(\"Impossible to find codes\");\n        }\n\n        //configure selector\n        //html selector configuration\n        config.selector = {};\n        config.selector.id = \"tree\";\n        config.selector.source = _.map(cl.codes, _.bind(function (obj) {\n            return {\n                value: obj.code,\n                label: obj.label[this.lang.toUpperCase()]\n            }\n        }, this));\n        config.selector.hideFilter = true;\n\n        return config;\n\n    };\n\n    Utils.prototype._configDropdownFromPeriod = function (c) {\n\n        var config = {},\n            domain = c.domain || {},\n            period = domain.period;\n\n        //configure selector\n        //html selector configuration\n        config.selector = {};\n        config.selector.id = \"dropdown\";\n        config.selector.from = period.from;\n        config.selector.to = period.to;\n\n        return config;\n\n    };\n\n    Utils.prototype._configTreeFromPeriod = function (c) {\n\n        var config = {},\n            domain = c.domain || {},\n            period = domain.period;\n\n        //configure selector\n        //html selector configuration\n        config.selector = {};\n        config.selector.id = \"tree\";\n        config.selector.from = period.from;\n        config.selector.to = period.to;\n        config.selector.hideFilter = true;\n\n        return config;\n\n    };\n\n    Utils.prototype._configDropdownFromTimelist = function (c) {\n\n        var config = {},\n            domain = c.domain || {},\n            timelist = domain.timeList || [],\n            format = this._getTimeFormat(timelist[0]);\n\n        //configure selector\n        config.selector = {};\n        config.selector.id = \"dropdown\";\n        config.selector.source = _.map(timelist, _.bind(function (obj) {\n            return {\n                value: obj,\n                label: new Moment(obj, format).format(this._getTimeLabelFormat(obj))\n            }\n        }, this));\n\n        return config;\n\n    };\n\n    Utils.prototype._configTreeFromTimelist = function (c) {\n\n        var config = {},\n            domain = c.domain || {},\n            timelist = domain.timeList || [],\n            format = this._getTimeFormat(timelist[0]);\n\n        //configure selector\n        config.selector = {};\n        config.selector.id = \"tree\";\n        config.selector.source = _.map(timelist, _.bind(function (obj) {\n            return {\n                value: obj,\n                label: new Moment(obj, format).format(this._getTimeLabelFormat(obj))\n            }\n        }, this));\n        config.selector.hideFilter = true;\n\n        return config;\n\n    };\n\n    Utils.prototype._configDropdownFromSource = function (c) {\n\n        var config = {},\n            domain = c.domain || {},\n            codes = domain.codes,\n            cl;\n\n        if (!Array.isArray(codes) || codes.length > 1) {\n            log.warn(\"Invalid domain.codes attributes\");\n        }\n\n        cl = codes[0];\n\n        if (!cl.codes) {\n            log.error(\"Impossible to find codes\");\n        }\n\n        //configure selector\n        //html selector configuration\n        config.selector = {};\n        config.selector.id = \"dropdown\";\n        config.selector.source = _.map(cl.codes, _.bind(function (obj) {\n            return {\n                value: obj.code,\n                label: obj.label[this.lang.toUpperCase()]\n            }\n        }, this));\n\n        return config;\n\n    };\n\n    Utils.prototype._configDropdownFromCodelist = function (c) {\n\n        var config = {},\n            domain = c.domain || {},\n            codes = domain.codes,\n            cl;\n\n        if (!Array.isArray(codes) || codes.length > 1) {\n            log.warn(\"Invalid domain.codes attributes\");\n        }\n\n        cl = codes[0];\n\n        if (!cl.idCodeList) {\n            log.error(\"Impossible to find idCodeList\");\n        }\n\n        //configure code list\n        config.cl = {};\n        config.cl.uid = cl.idCodeList;\n        config.cl.version = cl.version;\n\n        //configure selector\n        //html selector configuration\n        config.selector = {};\n        config.selector.id = \"dropdown\";\n\n        return config;\n\n    };\n\n    Utils.prototype._configTimeFromPeriod = function (c) {\n\n        /* ~~~~~~ Selector time\n         var config = {},\n         domain = c.domain || {},\n         period = domain.period,\n         from = String(period.from),\n         to = String(period.to),\n         //from = String(period.from).substring(0, String(period.from).length - 2),\n         //to = String(period.to).substring(0, String(period.to).length - 2),\n         format = this._getTimeFormat(from);\n\n         //configure selector\n         config.selector = {\n         config: {}\n         };\n         config.selector.id = \"time\";\n         config.selector.config.minDate = new Moment(from, format);\n         config.selector.config.maxDate = new Moment(to, format);\n         config.selector.config.format = this._getTimeLabelFormat(from);\n\n         if (from.length < 5) {\n         config.selector.config.viewMode = \"years\";\n         }\n\n         config.format = {\n         output : \"time\"\n         };\n         */\n\n        var config = {},\n            domain = c.domain || {},\n            period = domain.period,\n            from = String(period.from),\n            to = String(period.to);\n\n        //configure selector\n        config.selector = {\n            config: {}\n        };\n\n        config.selector.id = \"tree\";\n        config.selector.from = parseInt(from, 10);\n        config.selector.to = parseInt(to, 10);\n        config.selector.hideFilter = true;\n        config.format = {\n            output: \"time\"\n        };\n\n        return config;\n    };\n\n    Utils.prototype._configRangeFromPeriod = function (c) {\n\n        var config = {},\n            domain = c.domain || {},\n            period = domain.period;\n\n        //configure selector\n        config.selector = {\n            config: {}\n        };\n\n        config.selector.id = \"range\";\n        config.selector.config.min = period.from;\n        config.selector.config.max = period.to;\n        config.selector.config.type = \"double\";\n        config.selector.config.prettify_enabled = false;\n\n        return config;\n\n    };\n\n    Utils.prototype._configInput = function (c, o) {\n\n        var config = {\n            selector: {},\n            format: {\n                output: o.output || \"enumeration\"\n            }\n        };\n\n        config.selector.id = \"input\";\n        config.selector.type = o.type || \"text\";\n\n        return config;\n    };\n\n    Utils.prototype._configTemporalColumn = function (c) {\n\n        var domain = c.domain || {},\n            period = domain.period,\n            timelist = domain.timeList;\n\n        if (period && period.from && period.to) {\n            //return this._configRangeFromPeriod(c);\n            //return this._configTimeFromPeriod(c);\n            //return this._configDropdownFromPeriod(c);\n            return this._configTreeFromPeriod(c);\n        }\n\n        if (timelist) {\n            //return this._configDropdownFromTimelist(c);\n            return this._configTreeFromTimelist(c);\n        }\n\n        //Default set year range\n        log.warn(\"Column \" + c.id + \" set with default time period range.\");\n\n        c.domain = {\n            period: {\n                from: C.defaultPeriodFrom,\n                to: C.defaultPeriodTo\n            }\n        };\n\n        return this._configTimeFromPeriod(c);\n    };\n\n    Utils.prototype._getTimeFormat = function (s) {\n\n        var format;\n\n        switch (String(s).length) {\n            case 4 :\n                format = \"YYYY\";\n                break;\n            case 6:\n                format = \"YYYY MM\";\n                break;\n            case 8:\n                format = \"YYYY MM DD\";\n                break;\n            case 12:\n                format = \"YYYY MM DD hh mm\";\n                break;\n            case 14:\n                format = \"YYYY MM DD hh mm ss\";\n                break;\n            default:\n                log.warn(\"Impossible to find time format for: \" + format);\n        }\n\n        return format;\n\n    };\n\n    Utils.prototype._getTimeLabelFormat = function (s) {\n\n        if (this.timeLabelFormat) {\n            return this.timeLabelFormat;\n        }\n\n        var format;\n\n        switch (String(s).length) {\n            case 4 :\n                format = \"YYYY\";\n                break;\n            case 6:\n                format = \"L\";\n                break;\n            case 8:\n                format = \"L\";\n                break;\n            case 14:\n                format = \"lll\";\n                break;\n            default:\n                log.warn(\"Impossible to find time label format for: \" + format);\n        }\n\n        return format;\n\n    };\n\n    /*   /!* Revert Process *!/\n     /!**\n     * Extracts a blank selection from FENIX process\n     * default values\n     * @param {Object} filter\n     * @return {Object} filter configuration\n     *!/\n     Utils.prototype.revertProcess = function (filter) {\n\n     var configuration = {};\n\n     if (Array.isArray(filter)) {\n\n     _.each(filter, _.bind(function ( step ) {\n\n     var fn = \"_revert_\" + step.name;\n\n     if ( $.isFunction(this[fn]) && step.parameters) {\n     configuration[step.name] = _.extend( this[fn](step));\n     } else {\n     log.error(fn + \" is not a valid reverse function\");\n     }\n\n     }, this));\n     }\n\n     return configuration;\n\n     };\n\n     Utils.prototype._revert_filter = function (step) {\n     log.info(\"_revert_filter \" + JSON.stringify(step));\n\n     var self = this,\n     result = {},\n     parameters = step.parameters,\n     rows = parameters.rows,\n     columns = parameters.columns;\n\n     _.each(rows, function ( obj , key) {\n\n     if ( obj.time ) {\n     result[key] = self._revert_time_row(obj);\n     } else {\n     result[key] = self._revert_codes_row(obj);\n     }\n\n     });\n\n     return result;\n     };\n\n     Utils.prototype._revert_time_row = function ( step ) {\n\n     console.log(step)\n\n     };\n\n     Utils.prototype._revert_codes_row = function ( step ) {\n\n     console.log(step)\n\n\n     };\n\n     Utils.prototype._revert_group = function (step) {\n     log.info(\"_revert_group \" + JSON.stringify(step));\n\n\n     return;\n     };\n\n     Utils.prototype._revert_order = function (step) {\n     log.info(\"_revert_order \" + JSON.stringify(step));\n\n     return;\n     };\n     */\n    /* Validation */\n\n    Utils.prototype._isFenixResource = function (res) {\n\n        var valid = true,\n            errors = [],\n            resourceType = this.getNestedProperty(\"metadata.meContent.resourceRepresentationType\", res);\n\n        if (!res.hasOwnProperty(\"metadata\")) {\n            errors.push({code: ERR.INVALID_METADATA});\n            valid = false;\n        }\n\n        if (valid && !res.metadata.hasOwnProperty(\"dsd\")) {\n            errors.push({code: ERR.INVALID_DSD});\n            valid = false;\n        }\n\n        //NOT need field for FENIX GEOGRAPHIC RESOURCE\n        if (resourceType === \"dataset\" && valid && (!res.metadata.dsd.hasOwnProperty(\"columns\") || !Array.isArray(res.metadata.dsd.columns))) {\n            errors.push({code: ERR.INVALID_COLUMNS});\n        }\n\n        return errors.length > 0 ? errors : valid;\n    };\n\n    Utils.prototype._isFenixColumn = function (c) {\n\n        var valid = true,\n            errors = [];\n\n        if (!c.hasOwnProperty(\"dataType\")) {\n            errors.push({code: ERR.INVALID_COLUMN_DATATYPE});\n            valid = false;\n        }\n\n        return errors.length > 0 ? errors : valid;\n    };\n\n    Utils.prototype.getNestedProperty = function (path, obj) {\n\n        var obj = _.extend({}, obj),\n            arr = path.split(\".\");\n\n        while (arr.length && (obj = obj[arr.shift()]));\n\n        return obj;\n\n    };\n\n\n    Utils.prototype.assign = function (obj, prop, value) {\n        if (typeof prop === \"string\")\n            prop = prop.split(\".\");\n\n        if (prop.length > 1) {\n            var e = prop.shift();\n            this.assign(obj[e] =\n                    Object.prototype.toString.call(obj[e]) === \"[object Object]\"\n                        ? obj[e]\n                        : {},\n                prop,\n                value);\n        } else {\n            obj[prop[0]] = value;\n        }\n    };\n\n    Utils.prototype.getNestedProperty = function (path, obj) {\n\n        var obj = _.extend({}, obj),\n            arr = path.split(\".\");\n\n        while (arr.length && (obj = obj[arr.shift()]));\n\n        return obj;\n\n    };\n\n\n    return new Utils();\n\n\n});\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/js/index.js\n ** module id = 1\n ** module chunks = 0\n **/","if (typeof define !== 'function') {\n    var define = require('amdefine')(module);\n}\n\ndefine(function ( ) {\n\n    'use strict';\n\n    var prefix = \"\";\n\n    return {\n\n        //Utils\n        INVALID_FENIX_RESOURCE: prefix + \"invalid_fenix_resource\",\n        INVALID_METADATA: prefix + \"invalid_metadata\",\n        INVALID_DSD: prefix + \"invalid_dsd\",\n        INVALID_COLUMNS: prefix + \"invalid_dsd\",\n        INVALID_FENIX_COLUMN: prefix + \"invalid_fenix_column\",\n        INVALID_COLUMN_DATATYPE : prefix + \"invalid_column_datatype\",\n        UNKNOWN_FENIX_COLUMN_DATATYPE :prefix + \"unknown_fenix_column_datatype\",\n\n    };\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/config/errors.js\n ** module id = 2\n ** module chunks = 0\n **/","if (typeof define !== 'function') {\n    var define = require('amdefine')(module);\n}\n\ndefine(function () {\n\n    'use strict';\n\n    return {\n\n        forbiddenSubjects: [\"value\"],\n        exclude: [], //exclude id\n        common: {},\n        lang: 'EN',\n        defaultPeriodFrom: 1970,\n        defaultPeriodTo: 2017\n\n    }\n});\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/config/config.js\n ** module id = 3\n ** module chunks = 0\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_4__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"jquery\"\n ** module id = 4\n ** module chunks = 0\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_5__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"underscore\"\n ** module id = 5\n ** module chunks = 0\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_6__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"loglevel\"\n ** module id = 6\n ** module chunks = 0\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_7__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"handlebars\"\n ** module id = 7\n ** module chunks = 0\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_8__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"moment\"\n ** module id = 8\n ** module chunks = 0\n **/"],"sourceRoot":""}