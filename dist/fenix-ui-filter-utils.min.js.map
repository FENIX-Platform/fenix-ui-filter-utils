{"version":3,"sources":["webpack:///fenix-ui-filter-utils.min.js","webpack:///webpack/bootstrap f9bc97e00b98d458d139","webpack:///./src/js/index.js","webpack:///./src/config/errors.js","webpack:///./src/config/config.js","webpack:///external \"jquery\"","webpack:///external \"underscore\"","webpack:///external \"loglevel\"","webpack:///external \"handlebars\"","webpack:///external \"moment\""],"names":["define","__WEBPACK_EXTERNAL_MODULE_4__","__WEBPACK_EXTERNAL_MODULE_5__","__WEBPACK_EXTERNAL_MODULE_6__","__WEBPACK_EXTERNAL_MODULE_7__","__WEBPACK_EXTERNAL_MODULE_8__","modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","ERR","C","$","_","log","Handlebars","Moment","Utils","this","prototype","compileFilter","values","items","extend","config","formatConfig","format","template","output","compileTemplate","tmpl","key","dimension","toLocaleLowerCase","createTimeFilter","createEnumerationFilter","warn","model","cl","distinct","codes","join","error","uid","compile","process","JSON","parse","each","obj","version","v","time","valuesAreObject","from","findWhere","parent","to","couple","value","push","map","a","parseInt","sort","b","i","enumeration","cleanArray","actual","newArray","length","createConfiguration","o","info","configuration","_isFenixResource","metadata","dsd","columns","bind","contains","forbiddenSubjects","subject","exclude","endsWith","lang","toUpperCase","_processFxColumn","common","INVALID_FENIX_RESOURCE","mergeConfigurations","s","sync","toolbar","hasOwnProperty","selector","default","conf","_isFenixColumn","dataType","toLowerCase","_processCustomCodeColumn","_processEnumerationColumn","_processCodeColumn","_processDateColumn","_processMonthColumn","_processYearColumn","_processTimeColumn","_processTextColumn","_processLabelColumn","_processNumberColumn","_processPercentageColumn","_processBooleanColumn","UNKNOWN_FENIX_COLUMN_DATATYPE","INVALID_FENIX_COLUMN","_commonProcessColumn","_configTreeFromSource","domain","source","label","_configTreeFromDistinct","period","timelist","timeList","_configTimeFromPeriod","_configTreeFromTimelist","_configTemporalColumn","_configInput","type","title","Array","isArray","idCodeList","columnId","core","multiple","plugins","_configTreeFromCodelist","lazy","hideFilter","code","_configDropdownFromPeriod","_configTreeFromPeriod","_configDropdownFromTimelist","_getTimeFormat","_getTimeLabelFormat","_configDropdownFromSource","_configDropdownFromCodelist","String","_configRangeFromPeriod","min","max","prettify_enabled","defaultPeriodFrom","defaultPeriodTo","timeLabelFormat","res","valid","errors","resourceType","getNestedProperty","INVALID_METADATA","INVALID_DSD","INVALID_COLUMNS","INVALID_COLUMN_DATATYPE","path","arr","split","shift","assign","prop","e","Object","toString","apply","undefined","prefix"],"mappings":"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","file":"fenix-ui-filter-utils.min.js","sourcesContent":["define([\"jquery\",\"underscore\",\"loglevel\",\"handlebars\",\"moment\"], function(__WEBPACK_EXTERNAL_MODULE_4__, __WEBPACK_EXTERNAL_MODULE_5__, __WEBPACK_EXTERNAL_MODULE_6__, __WEBPACK_EXTERNAL_MODULE_7__, __WEBPACK_EXTERNAL_MODULE_8__) { return /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1);\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;if (false) {\r\n\t    var define = require('amdefine')(module);\r\n\t}\r\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\r\n\t    __webpack_require__(2),\r\n\t    __webpack_require__(3),\r\n\t    __webpack_require__(4),\r\n\t    __webpack_require__(5),\r\n\t    __webpack_require__(6),\r\n\t    __webpack_require__(7),\r\n\t    __webpack_require__(8)\r\n\t], __WEBPACK_AMD_DEFINE_RESULT__ = function (ERR, C, $, _, log, Handlebars, Moment) {\r\n\t\r\n\t    'use strict';\r\n\t\r\n\t    function Utils() {\r\n\t\r\n\t        return this;\r\n\t    }\r\n\t\r\n\t    //FENIX\r\n\t\r\n\t    Utils.prototype.compileFilter = function (id, values, items) {\r\n\t\r\n\t        $.extend(true, this, C);\r\n\t\r\n\t        var config = items[id] || {},\r\n\t            formatConfig = config.format || {},\r\n\t            template = formatConfig.template,\r\n\t            output = formatConfig.output || \"codes\";\r\n\t\r\n\t        if (template) {\r\n\t            return this.compileTemplate(id, values, config, template);\r\n\t        }\r\n\t\r\n\t        var key = formatConfig.dimension || id,\r\n\t            tmpl;\r\n\t\r\n\t        switch (output.toLocaleLowerCase()) {\r\n\t            case \"codes\" :\r\n\t\r\n\t                tmpl = '{ \"codes\":[{\"uid\": \"{{{uid}}}\", \"version\": \"{{version}}\", \"codes\": [{{{codes}}}] } ]}';\r\n\t                return this.compileTemplate(id, values, config, key, tmpl);\r\n\t\r\n\t                break;\r\n\t            case \"time\" :\r\n\t\r\n\t                return this.createTimeFilter(id, values, config, key);\r\n\t                break;\r\n\t\r\n\t            case \"enumeration\" :\r\n\t\r\n\t                return this.createEnumerationFilter(id, values, config, key);\r\n\t                break;\r\n\t            default :\r\n\t                log.warn(id + \" not included in the result set. Missing format configuration.\");\r\n\t                return {};\r\n\t        }\r\n\t\r\n\t    };\r\n\t\r\n\t    Utils.prototype.compileTemplate = function (id, values, config, key, template) {\r\n\t\r\n\t        /*\r\n\t         Priority\r\n\t         - values\r\n\t         - format configuration\r\n\t         - code list configuration\r\n\t         */\r\n\t\r\n\t        var model = $.extend(true, config.cl, config.format, config.distinct, {codes: '\"' + values.join('\",\"') + '\"'});\r\n\t\r\n\t        if (!template) {\r\n\t            log.error(\"Impossible to find '\" + id + \"' process template. Check your '\" + id + \"'.filter.process configuration.\")\r\n\t        }\r\n\t\r\n\t        if (!model.uid) {\r\n\t            log.error(\"Impossible to find '\" + id + \"' code list configuration for FENIX output format export.\");\r\n\t            return;\r\n\t        }\r\n\t\r\n\t        var tmpl = Handlebars.compile(template),\r\n\t            process = JSON.parse(tmpl(model)),\r\n\t            codes = process.codes;\r\n\t\r\n\t        //Remove empty version attributes\r\n\t        _.each(codes, function (obj) {\r\n\t            if (!obj.version) {\r\n\t                delete obj.version;\r\n\t            }\r\n\t        });\r\n\t\r\n\t        return process;\r\n\t\r\n\t    };\r\n\t\r\n\t    Utils.prototype.createTimeFilter = function (id, values, config, key) {\r\n\t\r\n\t        var time = [],\r\n\t            valuesAreObject = typeof values[0] === 'object',\r\n\t            v;\r\n\t\r\n\t        if (valuesAreObject) {\r\n\t\r\n\t            var from = _.findWhere(values, {parent: \"from\"}) || {},\r\n\t                to = _.findWhere(values, {parent: \"to\"}) || {},\r\n\t                couple = {from: null, to: null};\r\n\t\r\n\t            couple.from = from.value;\r\n\t            couple.to = to.value;\r\n\t\r\n\t            time.push($.extend({}, couple));\r\n\t\r\n\t        } else {\r\n\t\r\n\t            v = values.map(function (a) {\r\n\t                return parseInt(a, 10);\r\n\t            }).sort(function (a, b) {\r\n\t                return a - b;\r\n\t            });\r\n\t\r\n\t\r\n\t            _.each(v, function (i) {\r\n\t                time.push({from: i, to: i});\r\n\t            });\r\n\t\r\n\t        }\r\n\t\r\n\t        return {time: time};\r\n\t    };\r\n\t\r\n\t    Utils.prototype.createEnumerationFilter = function (id, values, config, key) {\r\n\t\r\n\t        return {enumeration: values};\r\n\t\r\n\t    };\r\n\t\r\n\t    Utils.prototype.cleanArray = function (actual) {\r\n\t        var newArray = [];\r\n\t        for (var i = 0; i < actual.length; i++) {\r\n\t            if (actual[i]) {\r\n\t                newArray.push(actual[i]);\r\n\t            }\r\n\t        }\r\n\t        return newArray;\r\n\t    };\r\n\t\r\n\t    /* FILTER UTILS */\r\n\t\r\n\t    /**\r\n\t     * Creates a FENIX filter configuration from a\r\n\t     * FENIX resource\r\n\t     * @param {Object} o\r\n\t     * @return {Object} filter configuration\r\n\t     */\r\n\t    Utils.prototype.createConfiguration = function (o) {\r\n\t        log.info(\"Create filter configuration from:\");\r\n\t        log.info(o);\r\n\t\r\n\t        $.extend(true, this, C, o);\r\n\t\r\n\t        var configuration = {};\r\n\t\r\n\t        if (this._isFenixResource(o.model) === true) {\r\n\t            log.info(\"Valid resource\");\r\n\t\r\n\t            _.each(o.model.metadata.dsd.columns, _.bind(function (c) {\r\n\t\r\n\t                if (!_.contains(this.forbiddenSubjects, c.subject) && !_.contains(this.exclude, c.id) && !c.id.endsWith(\"_\" + this.lang.toUpperCase())) {\r\n\t                    configuration[c.id] = $.extend(true, {}, this._processFxColumn(c, o.model.metadata), this.common);\r\n\t                } else {\r\n\t                    log.warn(c.id + \" was excluded. [id: \" + c.id + \", subject: \" + c.subject + \"]\");\r\n\t                }\r\n\t\r\n\t            }, this));\r\n\t\r\n\t        } else {\r\n\t            log.error(ERR.INVALID_FENIX_RESOURCE);\r\n\t        }\r\n\t\r\n\t        return configuration;\r\n\t    };\r\n\t\r\n\t    /**\r\n\t     * Merges a FENIX filter configuration with\r\n\t     * default values\r\n\t     * @param {Object} config\r\n\t     * @param {Object} sync\r\n\t     * @return {Object} filter configuration\r\n\t     */\r\n\t    Utils.prototype.mergeConfigurations = function (config, s) {\r\n\t\r\n\t        var sync = s.toolbar ? s.toolbar : s;\r\n\t\r\n\t        if (sync) {\r\n\t\r\n\t            var values = sync.values;\r\n\t\r\n\t            _.each(values, _.bind(function (obj, key) {\r\n\t\r\n\t                if (config.hasOwnProperty(key)) {\r\n\t                    config[key].selector.default = values[key];\r\n\t                }\r\n\t\r\n\t            }, this));\r\n\t        }\r\n\t\r\n\t        return config;\r\n\t\r\n\t    };\r\n\t\r\n\t    // private fns\r\n\t\r\n\t    Utils.prototype._processFxColumn = function (c, metadata) {\r\n\t\r\n\t        var conf = {};\r\n\t\r\n\t        if (this._isFenixColumn(c) === true) {\r\n\t            log.info(\"Valid column with dataType: \" + c.dataType.toLowerCase() + \" [column.id = \" + c.id + \" ]\");\r\n\t\r\n\t            switch (c.dataType.toLowerCase()) {\r\n\t                case \"customcode\" :\r\n\t                    conf = this._processCustomCodeColumn(c);\r\n\t                    break;\r\n\t                case \"enumeration\" :\r\n\t                    conf = this._processEnumerationColumn(c);\r\n\t                    break;\r\n\t                case \"code\" :\r\n\t                    conf = this._processCodeColumn(c, metadata);\r\n\t                    break;\r\n\t                case \"date\" :\r\n\t                    conf = this._processDateColumn(c);\r\n\t                    break;\r\n\t                case \"month\" :\r\n\t                    conf = this._processMonthColumn(c);\r\n\t                    break;\r\n\t                case \"year\" :\r\n\t                    conf = this._processYearColumn(c);\r\n\t                    break;\r\n\t                case \"time\" :\r\n\t                    conf = this._processTimeColumn(c);\r\n\t                    break;\r\n\t                case \"text\" :\r\n\t                    conf = this._processTextColumn(c);\r\n\t                    break;\r\n\t                case \"label\" :\r\n\t                    conf = this._processLabelColumn(c);\r\n\t                    break;\r\n\t                case \"number\" :\r\n\t                    conf = this._processNumberColumn(c);\r\n\t                    break;\r\n\t                case \"percentage\" :\r\n\t                    conf = this._processPercentageColumn(c);\r\n\t                    break;\r\n\t                case \"bool\" :\r\n\t                    conf = this._processBooleanColumn(c);\r\n\t                    break;\r\n\t                default:\r\n\t                    log.error(ERR.UNKNOWN_FENIX_COLUMN_DATATYPE, c.dataType.toLowerCase());\r\n\t\r\n\t            }\r\n\t        } else {\r\n\t            log.error(ERR.INVALID_FENIX_COLUMN);\r\n\t        }\r\n\t\r\n\t        return $.extend(true, {}, conf, this._commonProcessColumn(c));\r\n\t    };\r\n\t\r\n\t    /* processes for CODE FX column */\r\n\t\r\n\t    Utils.prototype._processCustomCodeColumn = function (c) {\r\n\t        return this._configTreeFromSource(c);\r\n\t        //return this._configDropdownFromSource(c);\r\n\t    };\r\n\t\r\n\t    Utils.prototype._processEnumerationColumn = function (c) {\r\n\t\r\n\t        var config = {},\r\n\t            domain = c.domain || {},\r\n\t            enumeration = domain.enumeration || [];\r\n\t\r\n\t        //configure selector\r\n\t        //html selector configuration\r\n\t        config.selector = {};\r\n\t        config.selector.id = \"tree\";\r\n\t        //config.selector.hideFilter = true;\r\n\t        config.selector.source = _.map(enumeration, function (obj) {\r\n\t            return {\r\n\t                value: obj,\r\n\t                label: obj\r\n\t            }\r\n\t        });\r\n\t\r\n\t        return config;\r\n\t    };\r\n\t\r\n\t    Utils.prototype._processCodeColumn = function (c, metadata) {\r\n\t\r\n\t        return this._configTreeFromDistinct(c, metadata);\r\n\t        //return this._configTreeFromCodelist(c);\r\n\t        //return this._configDropdownFromCodelist(c);\r\n\t\r\n\t    };\r\n\t\r\n\t    /* processes for TIME FX column */\r\n\t\r\n\t    Utils.prototype._processDateColumn = function (c) {\r\n\t\r\n\t        var domain = c.domain || {},\r\n\t            period = domain.period,\r\n\t            timelist = domain.timeList;\r\n\t\r\n\t        if (period && period.from && period.to) {\r\n\t            //return this._configRangeFromPeriod(c);\r\n\t            return this._configTimeFromPeriod(c);\r\n\t            //return this._configDropdownFromPeriod(c);\r\n\t        }\r\n\t\r\n\t        if (timelist) {\r\n\t            //return this._configDropdownFromTimelist(c);\r\n\t            return this._configTreeFromTimelist(c);\r\n\t        }\r\n\t\r\n\t        log.warn(\"Impossible to find process for column \" + c.id);\r\n\t\r\n\t        return {};\r\n\t\r\n\t    };\r\n\t\r\n\t    Utils.prototype._processMonthColumn = function (c) {\r\n\t\r\n\t        return this._configTemporalColumn(c);\r\n\t    };\r\n\t\r\n\t    Utils.prototype._processYearColumn = function (c) {\r\n\t\r\n\t        return this._configTemporalColumn(c);\r\n\t    };\r\n\t\r\n\t    Utils.prototype._processTimeColumn = function (c) {\r\n\t\r\n\t        return this._configTemporalColumn(c);\r\n\t\r\n\t    };\r\n\t\r\n\t    /* processes for TEXT FX column */\r\n\t\r\n\t    Utils.prototype._processTextColumn = function (c) {\r\n\t\r\n\t        return this._configInput(c, {type: \"text\"});\r\n\t    };\r\n\t\r\n\t    Utils.prototype._processLabelColumn = function (c) {\r\n\t\r\n\t        return this._configInput(c, {type: \"text\"});\r\n\t    };\r\n\t\r\n\t    /* processes for OTHER FX column */\r\n\t\r\n\t    Utils.prototype._processNumberColumn = function (c) {\r\n\t\r\n\t        return this._configInput(c, {type: \"number\", output: \"time\"});\r\n\t    };\r\n\t\r\n\t    Utils.prototype._processPercentageColumn = function (c) {\r\n\t        log.warn(\"TODO process\");\r\n\t    };\r\n\t\r\n\t    Utils.prototype._processBooleanColumn = function (c) {\r\n\t        return this._configInput(c, {type: \"checkbox\"});\r\n\t\r\n\t    };\r\n\t\r\n\t    /* Common processes */\r\n\t\r\n\t    Utils.prototype._commonProcessColumn = function (c) {\r\n\t\r\n\t        var config = {\r\n\t            template: {},\r\n\t            format: {\r\n\t                dimension: c.id\r\n\t            }\r\n\t        };\r\n\t\r\n\t        if (c.title && c.title[this.lang.toUpperCase()]) {\r\n\t            config.template.title = c.title[this.lang.toUpperCase()];\r\n\t        }\r\n\t\r\n\t        return config;\r\n\t    };\r\n\t\r\n\t    Utils.prototype._configTreeFromDistinct = function (c, metadata) {\r\n\t\r\n\t        var config = {},\r\n\t            domain = c.domain || {},\r\n\t            codes = domain.codes,\r\n\t            cl;\r\n\t\r\n\t        if (!Array.isArray(codes) || codes.length > 1) {\r\n\t            log.warn(\"Invalid domain.codes attributes\");\r\n\t        }\r\n\t\r\n\t        cl = codes[0];\r\n\t\r\n\t        if (!cl.idCodeList) {\r\n\t            log.error(\"Impossible to find idCodeList\");\r\n\t        }\r\n\t\r\n\t        //configure code list\r\n\t        config.distinct = {\r\n\t            uid : metadata.uid,\r\n\t            version : metadata.version,\r\n\t            columnId :c.id\r\n\t        };\r\n\t\r\n\t        //configure selector\r\n\t        //html selector configuration\r\n\t        config.selector = {};\r\n\t        config.selector.id = \"tree\";\r\n\t        config.selector.config = {\r\n\t            core: { multiple: false },\r\n\t            plugins: null\r\n\t        };\r\n\t        //config.selector.lazy = true;\r\n\t        //config.selector.hideFilter = true;\r\n\t\r\n\t        config.format = {};\r\n\t        config.format.output = \"codes\";\r\n\t        config.format.uid = cl.idCodeList;\r\n\t        config.format.version = cl.version;\r\n\t\r\n\t        return config;\r\n\t\r\n\t    };\r\n\t\r\n\t    Utils.prototype._configTreeFromCodelist = function (c) {\r\n\t\r\n\t        var config = {},\r\n\t            domain = c.domain || {},\r\n\t            codes = domain.codes,\r\n\t            cl;\r\n\t\r\n\t        if (!Array.isArray(codes) || codes.length > 1) {\r\n\t            log.warn(\"Invalid domain.codes attributes\");\r\n\t        }\r\n\t\r\n\t        cl = codes[0];\r\n\t\r\n\t        if (!cl.idCodeList) {\r\n\t            log.error(\"Impossible to find idCodeList\");\r\n\t        }\r\n\t\r\n\t        //configure code list\r\n\t        config.cl = {};\r\n\t        config.cl.uid = cl.idCodeList;\r\n\t        config.cl.version = cl.version;\r\n\t\r\n\t        //configure selector\r\n\t        //html selector configuration\r\n\t        config.selector = {};\r\n\t        config.selector.id = \"tree\";\r\n\t        config.selector.lazy = true;\r\n\t        config.selector.hideFilter = true;\r\n\t\r\n\t        return config;\r\n\t\r\n\t    };\r\n\t\r\n\t    Utils.prototype._configTreeFromSource = function (c) {\r\n\t\r\n\t        var config = {},\r\n\t            domain = c.domain || {},\r\n\t            codes = domain.codes,\r\n\t            cl;\r\n\t\r\n\t        if (!Array.isArray(codes) || codes.length > 1) {\r\n\t            log.warn(\"Invalid domain.codes attributes\");\r\n\t        }\r\n\t\r\n\t        cl = codes[0];\r\n\t\r\n\t        if (!cl.codes) {\r\n\t            log.error(\"Impossible to find codes\");\r\n\t        }\r\n\t\r\n\t        //configure selector\r\n\t        //html selector configuration\r\n\t        config.selector = {};\r\n\t        config.selector.id = \"tree\";\r\n\t        config.selector.source = _.map(cl.codes, _.bind(function (obj) {\r\n\t            return {\r\n\t                value: obj.code,\r\n\t                label: obj.label[this.lang.toUpperCase()]\r\n\t            }\r\n\t        }, this));\r\n\t        //config.selector.hideFilter = true;\r\n\t\r\n\t        return config;\r\n\t\r\n\t    };\r\n\t\r\n\t    Utils.prototype._configDropdownFromPeriod = function (c) {\r\n\t\r\n\t        var config = {},\r\n\t            domain = c.domain || {},\r\n\t            period = domain.period;\r\n\t\r\n\t        //configure selector\r\n\t        //html selector configuration\r\n\t        config.selector = {};\r\n\t        config.selector.id = \"dropdown\";\r\n\t        config.selector.from = period.from;\r\n\t        config.selector.to = period.to;\r\n\t\r\n\t        return config;\r\n\t\r\n\t    };\r\n\t\r\n\t    Utils.prototype._configTreeFromPeriod = function (c) {\r\n\t\r\n\t        var config = {},\r\n\t            domain = c.domain || {},\r\n\t            period = domain.period;\r\n\t\r\n\t        //configure selector\r\n\t        //html selector configuration\r\n\t        config.selector = {};\r\n\t        config.selector.id = \"tree\";\r\n\t        config.selector.from = period.from;\r\n\t        config.selector.to = period.to;\r\n\t        //config.selector.hideFilter = true;\r\n\t\r\n\t        return config;\r\n\t\r\n\t    };\r\n\t\r\n\t    Utils.prototype._configDropdownFromTimelist = function (c) {\r\n\t\r\n\t        var config = {},\r\n\t            domain = c.domain || {},\r\n\t            timelist = domain.timeList || [],\r\n\t            format = this._getTimeFormat(timelist[0]);\r\n\t\r\n\t        //configure selector\r\n\t        config.selector = {};\r\n\t        config.selector.id = \"dropdown\";\r\n\t        config.selector.source = _.map(timelist, _.bind(function (obj) {\r\n\t            return {\r\n\t                value: obj,\r\n\t                label: new Moment(obj, format).format(this._getTimeLabelFormat(obj))\r\n\t            }\r\n\t        }, this));\r\n\t\r\n\t        return config;\r\n\t\r\n\t    };\r\n\t\r\n\t    Utils.prototype._configTreeFromTimelist = function (c) {\r\n\t\r\n\t        var config = {},\r\n\t            domain = c.domain || {},\r\n\t            timelist = domain.timeList || [],\r\n\t            format = this._getTimeFormat(timelist[0]);\r\n\t\r\n\t        //configure selector\r\n\t        config.selector = {};\r\n\t        config.selector.id = \"tree\";\r\n\t        config.selector.source = _.map(timelist, _.bind(function (obj) {\r\n\t            return {\r\n\t                value: obj,\r\n\t                label: new Moment(obj, format).format(this._getTimeLabelFormat(obj))\r\n\t            }\r\n\t        }, this));\r\n\t        //config.selector.hideFilter = true;\r\n\t\r\n\t        return config;\r\n\t\r\n\t    };\r\n\t\r\n\t    Utils.prototype._configDropdownFromSource = function (c) {\r\n\t\r\n\t        var config = {},\r\n\t            domain = c.domain || {},\r\n\t            codes = domain.codes,\r\n\t            cl;\r\n\t\r\n\t        if (!Array.isArray(codes) || codes.length > 1) {\r\n\t            log.warn(\"Invalid domain.codes attributes\");\r\n\t        }\r\n\t\r\n\t        cl = codes[0];\r\n\t\r\n\t        if (!cl.codes) {\r\n\t            log.error(\"Impossible to find codes\");\r\n\t        }\r\n\t\r\n\t        //configure selector\r\n\t        //html selector configuration\r\n\t        config.selector = {};\r\n\t        config.selector.id = \"dropdown\";\r\n\t        config.selector.source = _.map(cl.codes, _.bind(function (obj) {\r\n\t            return {\r\n\t                value: obj.code,\r\n\t                label: obj.label[this.lang.toUpperCase()]\r\n\t            }\r\n\t        }, this));\r\n\t\r\n\t        return config;\r\n\t\r\n\t    };\r\n\t\r\n\t    Utils.prototype._configDropdownFromCodelist = function (c) {\r\n\t\r\n\t        var config = {},\r\n\t            domain = c.domain || {},\r\n\t            codes = domain.codes,\r\n\t            cl;\r\n\t\r\n\t        if (!Array.isArray(codes) || codes.length > 1) {\r\n\t            log.warn(\"Invalid domain.codes attributes\");\r\n\t        }\r\n\t\r\n\t        cl = codes[0];\r\n\t\r\n\t        if (!cl.idCodeList) {\r\n\t            log.error(\"Impossible to find idCodeList\");\r\n\t        }\r\n\t\r\n\t        //configure code list\r\n\t        config.cl = {};\r\n\t        config.cl.uid = cl.idCodeList;\r\n\t        config.cl.version = cl.version;\r\n\t\r\n\t        //configure selector\r\n\t        //html selector configuration\r\n\t        config.selector = {};\r\n\t        config.selector.id = \"dropdown\";\r\n\t\r\n\t        return config;\r\n\t\r\n\t    };\r\n\t\r\n\t    Utils.prototype._configTimeFromPeriod = function (c) {\r\n\t\r\n\t        /* ~~~~~~ Selector time\r\n\t         var config = {},\r\n\t         domain = c.domain || {},\r\n\t         period = domain.period,\r\n\t         from = String(period.from),\r\n\t         to = String(period.to),\r\n\t         //from = String(period.from).substring(0, String(period.from).length - 2),\r\n\t         //to = String(period.to).substring(0, String(period.to).length - 2),\r\n\t         format = this._getTimeFormat(from);\r\n\t\r\n\t         //configure selector\r\n\t         config.selector = {\r\n\t         config: {}\r\n\t         };\r\n\t         config.selector.id = \"time\";\r\n\t         config.selector.config.minDate = new Moment(from, format);\r\n\t         config.selector.config.maxDate = new Moment(to, format);\r\n\t         config.selector.config.format = this._getTimeLabelFormat(from);\r\n\t\r\n\t         if (from.length < 5) {\r\n\t         config.selector.config.viewMode = \"years\";\r\n\t         }\r\n\t\r\n\t         config.format = {\r\n\t         output : \"time\"\r\n\t         };\r\n\t         */\r\n\t\r\n\t        var config = {},\r\n\t            domain = c.domain || {},\r\n\t            period = domain.period,\r\n\t            from = String(period.from),\r\n\t            to = String(period.to);\r\n\t\r\n\t        //configure selector\r\n\t        config.selector = {\r\n\t            config: {}\r\n\t        };\r\n\t\r\n\t        config.selector.id = \"tree\";\r\n\t        config.selector.from = parseInt(from, 10);\r\n\t        config.selector.to = parseInt(to, 10);\r\n\t        //config.selector.hideFilter = true;\r\n\t        config.format = {\r\n\t            output: \"time\"\r\n\t        };\r\n\t\r\n\t        return config;\r\n\t    };\r\n\t\r\n\t    Utils.prototype._configRangeFromPeriod = function (c) {\r\n\t\r\n\t        var config = {},\r\n\t            domain = c.domain || {},\r\n\t            period = domain.period;\r\n\t\r\n\t        //configure selector\r\n\t        config.selector = {\r\n\t            config: {}\r\n\t        };\r\n\t\r\n\t        config.selector.id = \"range\";\r\n\t        config.selector.config.min = period.from;\r\n\t        config.selector.config.max = period.to;\r\n\t        config.selector.config.type = \"double\";\r\n\t        config.selector.config.prettify_enabled = false;\r\n\t\r\n\t        return config;\r\n\t\r\n\t    };\r\n\t\r\n\t    Utils.prototype._configInput = function (c, o) {\r\n\t\r\n\t        var config = {\r\n\t            selector: {},\r\n\t            format: {\r\n\t                output: o.output || \"enumeration\"\r\n\t            }\r\n\t        };\r\n\t\r\n\t        config.selector.id = \"input\";\r\n\t        config.selector.type = o.type || \"text\";\r\n\t\r\n\t        return config;\r\n\t    };\r\n\t\r\n\t    Utils.prototype._configTemporalColumn = function (c) {\r\n\t\r\n\t        var domain = c.domain || {},\r\n\t            period = domain.period,\r\n\t            timelist = domain.timeList;\r\n\t\r\n\t        if (period && period.from && period.to) {\r\n\t            //return this._configRangeFromPeriod(c);\r\n\t            //return this._configTimeFromPeriod(c);\r\n\t            //return this._configDropdownFromPeriod(c);\r\n\t            return this._configTreeFromPeriod(c);\r\n\t        }\r\n\t\r\n\t        if (timelist) {\r\n\t            //return this._configDropdownFromTimelist(c);\r\n\t            return this._configTreeFromTimelist(c);\r\n\t        }\r\n\t\r\n\t        //Default set year range\r\n\t        log.warn(\"Column \" + c.id + \" set with default time period range.\");\r\n\t\r\n\t        c.domain = {\r\n\t            period: {\r\n\t                from: C.defaultPeriodFrom,\r\n\t                to: C.defaultPeriodTo\r\n\t            }\r\n\t        };\r\n\t\r\n\t        return this._configTimeFromPeriod(c);\r\n\t    };\r\n\t\r\n\t    Utils.prototype._getTimeFormat = function (s) {\r\n\t\r\n\t        var format;\r\n\t\r\n\t        switch (String(s).length) {\r\n\t            case 4 :\r\n\t                format = \"YYYY\";\r\n\t                break;\r\n\t            case 6:\r\n\t                format = \"YYYY MM\";\r\n\t                break;\r\n\t            case 8:\r\n\t                format = \"YYYY MM DD\";\r\n\t                break;\r\n\t            case 12:\r\n\t                format = \"YYYY MM DD hh mm\";\r\n\t                break;\r\n\t            case 14:\r\n\t                format = \"YYYY MM DD hh mm ss\";\r\n\t                break;\r\n\t            default:\r\n\t                log.warn(\"Impossible to find time format for: \" + format);\r\n\t        }\r\n\t\r\n\t        return format;\r\n\t\r\n\t    };\r\n\t\r\n\t    Utils.prototype._getTimeLabelFormat = function (s) {\r\n\t\r\n\t        if (this.timeLabelFormat) {\r\n\t            return this.timeLabelFormat;\r\n\t        }\r\n\t\r\n\t        var format;\r\n\t\r\n\t        switch (String(s).length) {\r\n\t            case 4 :\r\n\t                format = \"YYYY\";\r\n\t                break;\r\n\t            case 6:\r\n\t                format = \"L\";\r\n\t                break;\r\n\t            case 8:\r\n\t                format = \"L\";\r\n\t                break;\r\n\t            case 14:\r\n\t                format = \"lll\";\r\n\t                break;\r\n\t            default:\r\n\t                log.warn(\"Impossible to find time label format for: \" + format);\r\n\t        }\r\n\t\r\n\t        return format;\r\n\t\r\n\t    };\r\n\t\r\n\t    /*   /!* Revert Process *!/\r\n\t     /!**\r\n\t     * Extracts a blank selection from FENIX process\r\n\t     * default values\r\n\t     * @param {Object} filter\r\n\t     * @return {Object} filter configuration\r\n\t     *!/\r\n\t     Utils.prototype.revertProcess = function (filter) {\r\n\t\r\n\t     var configuration = {};\r\n\t\r\n\t     if (Array.isArray(filter)) {\r\n\t\r\n\t     _.each(filter, _.bind(function ( step ) {\r\n\t\r\n\t     var fn = \"_revert_\" + step.name;\r\n\t\r\n\t     if ( $.isFunction(this[fn]) && step.parameters) {\r\n\t     configuration[step.name] = _.extend( this[fn](step));\r\n\t     } else {\r\n\t     log.error(fn + \" is not a valid reverse function\");\r\n\t     }\r\n\t\r\n\t     }, this));\r\n\t     }\r\n\t\r\n\t     return configuration;\r\n\t\r\n\t     };\r\n\t\r\n\t     Utils.prototype._revert_filter = function (step) {\r\n\t     log.info(\"_revert_filter \" + JSON.stringify(step));\r\n\t\r\n\t     var self = this,\r\n\t     result = {},\r\n\t     parameters = step.parameters,\r\n\t     rows = parameters.rows,\r\n\t     columns = parameters.columns;\r\n\t\r\n\t     _.each(rows, function ( obj , key) {\r\n\t\r\n\t     if ( obj.time ) {\r\n\t     result[key] = self._revert_time_row(obj);\r\n\t     } else {\r\n\t     result[key] = self._revert_codes_row(obj);\r\n\t     }\r\n\t\r\n\t     });\r\n\t\r\n\t     return result;\r\n\t     };\r\n\t\r\n\t     Utils.prototype._revert_time_row = function ( step ) {\r\n\t\r\n\t     console.log(step)\r\n\t\r\n\t     };\r\n\t\r\n\t     Utils.prototype._revert_codes_row = function ( step ) {\r\n\t\r\n\t     console.log(step)\r\n\t\r\n\t\r\n\t     };\r\n\t\r\n\t     Utils.prototype._revert_group = function (step) {\r\n\t     log.info(\"_revert_group \" + JSON.stringify(step));\r\n\t\r\n\t\r\n\t     return;\r\n\t     };\r\n\t\r\n\t     Utils.prototype._revert_order = function (step) {\r\n\t     log.info(\"_revert_order \" + JSON.stringify(step));\r\n\t\r\n\t     return;\r\n\t     };\r\n\t     */\r\n\t    /* Validation */\r\n\t\r\n\t    Utils.prototype._isFenixResource = function (res) {\r\n\t\r\n\t        var valid = true,\r\n\t            errors = [],\r\n\t            resourceType = this.getNestedProperty(\"metadata.meContent.resourceRepresentationType\", res);\r\n\t\r\n\t        if (!res.hasOwnProperty(\"metadata\")) {\r\n\t            errors.push({code: ERR.INVALID_METADATA});\r\n\t            valid = false;\r\n\t        }\r\n\t\r\n\t        if (valid && !res.metadata.hasOwnProperty(\"dsd\")) {\r\n\t            errors.push({code: ERR.INVALID_DSD});\r\n\t            valid = false;\r\n\t        }\r\n\t\r\n\t        //NOT need field for FENIX GEOGRAPHIC RESOURCE\r\n\t        if (resourceType === \"dataset\" && valid && (!res.metadata.dsd.hasOwnProperty(\"columns\") || !Array.isArray(res.metadata.dsd.columns))) {\r\n\t            errors.push({code: ERR.INVALID_COLUMNS});\r\n\t        }\r\n\t\r\n\t        return errors.length > 0 ? errors : valid;\r\n\t    };\r\n\t\r\n\t    Utils.prototype._isFenixColumn = function (c) {\r\n\t\r\n\t        var valid = true,\r\n\t            errors = [];\r\n\t\r\n\t        if (!c.hasOwnProperty(\"dataType\")) {\r\n\t            errors.push({code: ERR.INVALID_COLUMN_DATATYPE});\r\n\t            valid = false;\r\n\t        }\r\n\t\r\n\t        return errors.length > 0 ? errors : valid;\r\n\t    };\r\n\t\r\n\t    Utils.prototype.getNestedProperty = function (path, obj) {\r\n\t\r\n\t        var obj = _.extend({}, obj),\r\n\t            arr = path.split(\".\");\r\n\t\r\n\t        while (arr.length && (obj = obj[arr.shift()]));\r\n\t\r\n\t        return obj;\r\n\t\r\n\t    };\r\n\t\r\n\t\r\n\t    Utils.prototype.assign = function (obj, prop, value) {\r\n\t        if (typeof prop === \"string\")\r\n\t            prop = prop.split(\".\");\r\n\t\r\n\t        if (prop.length > 1) {\r\n\t            var e = prop.shift();\r\n\t            this.assign(obj[e] =\r\n\t                    Object.prototype.toString.call(obj[e]) === \"[object Object]\"\r\n\t                        ? obj[e]\r\n\t                        : {},\r\n\t                prop,\r\n\t                value);\r\n\t        } else {\r\n\t            obj[prop[0]] = value;\r\n\t        }\r\n\t    };\r\n\t\r\n\t    Utils.prototype.getNestedProperty = function (path, obj) {\r\n\t\r\n\t        var obj = _.extend({}, obj),\r\n\t            arr = path.split(\".\");\r\n\t\r\n\t        while (arr.length && (obj = obj[arr.shift()]));\r\n\t\r\n\t        return obj;\r\n\t\r\n\t    };\r\n\t\r\n\t\r\n\t    return new Utils();\r\n\t\r\n\t\r\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;if (false) {\r\n\t    var define = require('amdefine')(module);\r\n\t}\r\n\t\r\n\t!(__WEBPACK_AMD_DEFINE_RESULT__ = function ( ) {\r\n\t\r\n\t    'use strict';\r\n\t\r\n\t    var prefix = \"\";\r\n\t\r\n\t    return {\r\n\t\r\n\t        //Utils\r\n\t        INVALID_FENIX_RESOURCE: prefix + \"invalid_fenix_resource\",\r\n\t        INVALID_METADATA: prefix + \"invalid_metadata\",\r\n\t        INVALID_DSD: prefix + \"invalid_dsd\",\r\n\t        INVALID_COLUMNS: prefix + \"invalid_dsd\",\r\n\t        INVALID_FENIX_COLUMN: prefix + \"invalid_fenix_column\",\r\n\t        INVALID_COLUMN_DATATYPE : prefix + \"invalid_column_datatype\",\r\n\t        UNKNOWN_FENIX_COLUMN_DATATYPE :prefix + \"unknown_fenix_column_datatype\",\r\n\t\r\n\t    };\r\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;if (false) {\r\n\t    var define = require('amdefine')(module);\r\n\t}\r\n\t\r\n\t!(__WEBPACK_AMD_DEFINE_RESULT__ = function () {\r\n\t\r\n\t    'use strict';\r\n\t\r\n\t    return {\r\n\t\r\n\t        forbiddenSubjects: [\"value\"],\r\n\t        exclude: [], //exclude id\r\n\t        common: {},\r\n\t        lang: 'EN',\r\n\t        defaultPeriodFrom: 1970,\r\n\t        defaultPeriodTo: 2017\r\n\t\r\n\t    }\r\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ },\n/* 4 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_4__;\n\n/***/ },\n/* 5 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_5__;\n\n/***/ },\n/* 6 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_6__;\n\n/***/ },\n/* 7 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_7__;\n\n/***/ },\n/* 8 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_8__;\n\n/***/ }\n/******/ ])});;\n\n\n// WEBPACK FOOTER //\n// fenix-ui-filter-utils.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap f9bc97e00b98d458d139","if (typeof define !== 'function') {\r\n    var define = require('amdefine')(module);\r\n}\r\ndefine([\r\n    '../config/errors',\r\n    '../config/config',\r\n    'jquery',\r\n    'underscore',\r\n    'loglevel',\r\n    'handlebars',\r\n    'moment'\r\n], function (ERR, C, $, _, log, Handlebars, Moment) {\r\n\r\n    'use strict';\r\n\r\n    function Utils() {\r\n\r\n        return this;\r\n    }\r\n\r\n    //FENIX\r\n\r\n    Utils.prototype.compileFilter = function (id, values, items) {\r\n\r\n        $.extend(true, this, C);\r\n\r\n        var config = items[id] || {},\r\n            formatConfig = config.format || {},\r\n            template = formatConfig.template,\r\n            output = formatConfig.output || \"codes\";\r\n\r\n        if (template) {\r\n            return this.compileTemplate(id, values, config, template);\r\n        }\r\n\r\n        var key = formatConfig.dimension || id,\r\n            tmpl;\r\n\r\n        switch (output.toLocaleLowerCase()) {\r\n            case \"codes\" :\r\n\r\n                tmpl = '{ \"codes\":[{\"uid\": \"{{{uid}}}\", \"version\": \"{{version}}\", \"codes\": [{{{codes}}}] } ]}';\r\n                return this.compileTemplate(id, values, config, key, tmpl);\r\n\r\n                break;\r\n            case \"time\" :\r\n\r\n                return this.createTimeFilter(id, values, config, key);\r\n                break;\r\n\r\n            case \"enumeration\" :\r\n\r\n                return this.createEnumerationFilter(id, values, config, key);\r\n                break;\r\n            default :\r\n                log.warn(id + \" not included in the result set. Missing format configuration.\");\r\n                return {};\r\n        }\r\n\r\n    };\r\n\r\n    Utils.prototype.compileTemplate = function (id, values, config, key, template) {\r\n\r\n        /*\r\n         Priority\r\n         - values\r\n         - format configuration\r\n         - code list configuration\r\n         */\r\n\r\n        var model = $.extend(true, config.cl, config.format, config.distinct, {codes: '\"' + values.join('\",\"') + '\"'});\r\n\r\n        if (!template) {\r\n            log.error(\"Impossible to find '\" + id + \"' process template. Check your '\" + id + \"'.filter.process configuration.\")\r\n        }\r\n\r\n        if (!model.uid) {\r\n            log.error(\"Impossible to find '\" + id + \"' code list configuration for FENIX output format export.\");\r\n            return;\r\n        }\r\n\r\n        var tmpl = Handlebars.compile(template),\r\n            process = JSON.parse(tmpl(model)),\r\n            codes = process.codes;\r\n\r\n        //Remove empty version attributes\r\n        _.each(codes, function (obj) {\r\n            if (!obj.version) {\r\n                delete obj.version;\r\n            }\r\n        });\r\n\r\n        return process;\r\n\r\n    };\r\n\r\n    Utils.prototype.createTimeFilter = function (id, values, config, key) {\r\n\r\n        var time = [],\r\n            valuesAreObject = typeof values[0] === 'object',\r\n            v;\r\n\r\n        if (valuesAreObject) {\r\n\r\n            var from = _.findWhere(values, {parent: \"from\"}) || {},\r\n                to = _.findWhere(values, {parent: \"to\"}) || {},\r\n                couple = {from: null, to: null};\r\n\r\n            couple.from = from.value;\r\n            couple.to = to.value;\r\n\r\n            time.push($.extend({}, couple));\r\n\r\n        } else {\r\n\r\n            v = values.map(function (a) {\r\n                return parseInt(a, 10);\r\n            }).sort(function (a, b) {\r\n                return a - b;\r\n            });\r\n\r\n\r\n            _.each(v, function (i) {\r\n                time.push({from: i, to: i});\r\n            });\r\n\r\n        }\r\n\r\n        return {time: time};\r\n    };\r\n\r\n    Utils.prototype.createEnumerationFilter = function (id, values, config, key) {\r\n\r\n        return {enumeration: values};\r\n\r\n    };\r\n\r\n    Utils.prototype.cleanArray = function (actual) {\r\n        var newArray = [];\r\n        for (var i = 0; i < actual.length; i++) {\r\n            if (actual[i]) {\r\n                newArray.push(actual[i]);\r\n            }\r\n        }\r\n        return newArray;\r\n    };\r\n\r\n    /* FILTER UTILS */\r\n\r\n    /**\r\n     * Creates a FENIX filter configuration from a\r\n     * FENIX resource\r\n     * @param {Object} o\r\n     * @return {Object} filter configuration\r\n     */\r\n    Utils.prototype.createConfiguration = function (o) {\r\n        log.info(\"Create filter configuration from:\");\r\n        log.info(o);\r\n\r\n        $.extend(true, this, C, o);\r\n\r\n        var configuration = {};\r\n\r\n        if (this._isFenixResource(o.model) === true) {\r\n            log.info(\"Valid resource\");\r\n\r\n            _.each(o.model.metadata.dsd.columns, _.bind(function (c) {\r\n\r\n                if (!_.contains(this.forbiddenSubjects, c.subject) && !_.contains(this.exclude, c.id) && !c.id.endsWith(\"_\" + this.lang.toUpperCase())) {\r\n                    configuration[c.id] = $.extend(true, {}, this._processFxColumn(c, o.model.metadata), this.common);\r\n                } else {\r\n                    log.warn(c.id + \" was excluded. [id: \" + c.id + \", subject: \" + c.subject + \"]\");\r\n                }\r\n\r\n            }, this));\r\n\r\n        } else {\r\n            log.error(ERR.INVALID_FENIX_RESOURCE);\r\n        }\r\n\r\n        return configuration;\r\n    };\r\n\r\n    /**\r\n     * Merges a FENIX filter configuration with\r\n     * default values\r\n     * @param {Object} config\r\n     * @param {Object} sync\r\n     * @return {Object} filter configuration\r\n     */\r\n    Utils.prototype.mergeConfigurations = function (config, s) {\r\n\r\n        var sync = s.toolbar ? s.toolbar : s;\r\n\r\n        if (sync) {\r\n\r\n            var values = sync.values;\r\n\r\n            _.each(values, _.bind(function (obj, key) {\r\n\r\n                if (config.hasOwnProperty(key)) {\r\n                    config[key].selector.default = values[key];\r\n                }\r\n\r\n            }, this));\r\n        }\r\n\r\n        return config;\r\n\r\n    };\r\n\r\n    // private fns\r\n\r\n    Utils.prototype._processFxColumn = function (c, metadata) {\r\n\r\n        var conf = {};\r\n\r\n        if (this._isFenixColumn(c) === true) {\r\n            log.info(\"Valid column with dataType: \" + c.dataType.toLowerCase() + \" [column.id = \" + c.id + \" ]\");\r\n\r\n            switch (c.dataType.toLowerCase()) {\r\n                case \"customcode\" :\r\n                    conf = this._processCustomCodeColumn(c);\r\n                    break;\r\n                case \"enumeration\" :\r\n                    conf = this._processEnumerationColumn(c);\r\n                    break;\r\n                case \"code\" :\r\n                    conf = this._processCodeColumn(c, metadata);\r\n                    break;\r\n                case \"date\" :\r\n                    conf = this._processDateColumn(c);\r\n                    break;\r\n                case \"month\" :\r\n                    conf = this._processMonthColumn(c);\r\n                    break;\r\n                case \"year\" :\r\n                    conf = this._processYearColumn(c);\r\n                    break;\r\n                case \"time\" :\r\n                    conf = this._processTimeColumn(c);\r\n                    break;\r\n                case \"text\" :\r\n                    conf = this._processTextColumn(c);\r\n                    break;\r\n                case \"label\" :\r\n                    conf = this._processLabelColumn(c);\r\n                    break;\r\n                case \"number\" :\r\n                    conf = this._processNumberColumn(c);\r\n                    break;\r\n                case \"percentage\" :\r\n                    conf = this._processPercentageColumn(c);\r\n                    break;\r\n                case \"bool\" :\r\n                    conf = this._processBooleanColumn(c);\r\n                    break;\r\n                default:\r\n                    log.error(ERR.UNKNOWN_FENIX_COLUMN_DATATYPE, c.dataType.toLowerCase());\r\n\r\n            }\r\n        } else {\r\n            log.error(ERR.INVALID_FENIX_COLUMN);\r\n        }\r\n\r\n        return $.extend(true, {}, conf, this._commonProcessColumn(c));\r\n    };\r\n\r\n    /* processes for CODE FX column */\r\n\r\n    Utils.prototype._processCustomCodeColumn = function (c) {\r\n        return this._configTreeFromSource(c);\r\n        //return this._configDropdownFromSource(c);\r\n    };\r\n\r\n    Utils.prototype._processEnumerationColumn = function (c) {\r\n\r\n        var config = {},\r\n            domain = c.domain || {},\r\n            enumeration = domain.enumeration || [];\r\n\r\n        //configure selector\r\n        //html selector configuration\r\n        config.selector = {};\r\n        config.selector.id = \"tree\";\r\n        //config.selector.hideFilter = true;\r\n        config.selector.source = _.map(enumeration, function (obj) {\r\n            return {\r\n                value: obj,\r\n                label: obj\r\n            }\r\n        });\r\n\r\n        return config;\r\n    };\r\n\r\n    Utils.prototype._processCodeColumn = function (c, metadata) {\r\n\r\n        return this._configTreeFromDistinct(c, metadata);\r\n        //return this._configTreeFromCodelist(c);\r\n        //return this._configDropdownFromCodelist(c);\r\n\r\n    };\r\n\r\n    /* processes for TIME FX column */\r\n\r\n    Utils.prototype._processDateColumn = function (c) {\r\n\r\n        var domain = c.domain || {},\r\n            period = domain.period,\r\n            timelist = domain.timeList;\r\n\r\n        if (period && period.from && period.to) {\r\n            //return this._configRangeFromPeriod(c);\r\n            return this._configTimeFromPeriod(c);\r\n            //return this._configDropdownFromPeriod(c);\r\n        }\r\n\r\n        if (timelist) {\r\n            //return this._configDropdownFromTimelist(c);\r\n            return this._configTreeFromTimelist(c);\r\n        }\r\n\r\n        log.warn(\"Impossible to find process for column \" + c.id);\r\n\r\n        return {};\r\n\r\n    };\r\n\r\n    Utils.prototype._processMonthColumn = function (c) {\r\n\r\n        return this._configTemporalColumn(c);\r\n    };\r\n\r\n    Utils.prototype._processYearColumn = function (c) {\r\n\r\n        return this._configTemporalColumn(c);\r\n    };\r\n\r\n    Utils.prototype._processTimeColumn = function (c) {\r\n\r\n        return this._configTemporalColumn(c);\r\n\r\n    };\r\n\r\n    /* processes for TEXT FX column */\r\n\r\n    Utils.prototype._processTextColumn = function (c) {\r\n\r\n        return this._configInput(c, {type: \"text\"});\r\n    };\r\n\r\n    Utils.prototype._processLabelColumn = function (c) {\r\n\r\n        return this._configInput(c, {type: \"text\"});\r\n    };\r\n\r\n    /* processes for OTHER FX column */\r\n\r\n    Utils.prototype._processNumberColumn = function (c) {\r\n\r\n        return this._configInput(c, {type: \"number\", output: \"time\"});\r\n    };\r\n\r\n    Utils.prototype._processPercentageColumn = function (c) {\r\n        log.warn(\"TODO process\");\r\n    };\r\n\r\n    Utils.prototype._processBooleanColumn = function (c) {\r\n        return this._configInput(c, {type: \"checkbox\"});\r\n\r\n    };\r\n\r\n    /* Common processes */\r\n\r\n    Utils.prototype._commonProcessColumn = function (c) {\r\n\r\n        var config = {\r\n            template: {},\r\n            format: {\r\n                dimension: c.id\r\n            }\r\n        };\r\n\r\n        if (c.title && c.title[this.lang.toUpperCase()]) {\r\n            config.template.title = c.title[this.lang.toUpperCase()];\r\n        }\r\n\r\n        return config;\r\n    };\r\n\r\n    Utils.prototype._configTreeFromDistinct = function (c, metadata) {\r\n\r\n        var config = {},\r\n            domain = c.domain || {},\r\n            codes = domain.codes,\r\n            cl;\r\n\r\n        if (!Array.isArray(codes) || codes.length > 1) {\r\n            log.warn(\"Invalid domain.codes attributes\");\r\n        }\r\n\r\n        cl = codes[0];\r\n\r\n        if (!cl.idCodeList) {\r\n            log.error(\"Impossible to find idCodeList\");\r\n        }\r\n\r\n        //configure code list\r\n        config.distinct = {\r\n            uid : metadata.uid,\r\n            version : metadata.version,\r\n            columnId :c.id\r\n        };\r\n\r\n        //configure selector\r\n        //html selector configuration\r\n        config.selector = {};\r\n        config.selector.id = \"tree\";\r\n        config.selector.config = {\r\n            core: { multiple: false },\r\n            plugins: null\r\n        };\r\n        //config.selector.lazy = true;\r\n        //config.selector.hideFilter = true;\r\n\r\n        config.format = {};\r\n        config.format.output = \"codes\";\r\n        config.format.uid = cl.idCodeList;\r\n        config.format.version = cl.version;\r\n\r\n        return config;\r\n\r\n    };\r\n\r\n    Utils.prototype._configTreeFromCodelist = function (c) {\r\n\r\n        var config = {},\r\n            domain = c.domain || {},\r\n            codes = domain.codes,\r\n            cl;\r\n\r\n        if (!Array.isArray(codes) || codes.length > 1) {\r\n            log.warn(\"Invalid domain.codes attributes\");\r\n        }\r\n\r\n        cl = codes[0];\r\n\r\n        if (!cl.idCodeList) {\r\n            log.error(\"Impossible to find idCodeList\");\r\n        }\r\n\r\n        //configure code list\r\n        config.cl = {};\r\n        config.cl.uid = cl.idCodeList;\r\n        config.cl.version = cl.version;\r\n\r\n        //configure selector\r\n        //html selector configuration\r\n        config.selector = {};\r\n        config.selector.id = \"tree\";\r\n        config.selector.lazy = true;\r\n        config.selector.hideFilter = true;\r\n\r\n        return config;\r\n\r\n    };\r\n\r\n    Utils.prototype._configTreeFromSource = function (c) {\r\n\r\n        var config = {},\r\n            domain = c.domain || {},\r\n            codes = domain.codes,\r\n            cl;\r\n\r\n        if (!Array.isArray(codes) || codes.length > 1) {\r\n            log.warn(\"Invalid domain.codes attributes\");\r\n        }\r\n\r\n        cl = codes[0];\r\n\r\n        if (!cl.codes) {\r\n            log.error(\"Impossible to find codes\");\r\n        }\r\n\r\n        //configure selector\r\n        //html selector configuration\r\n        config.selector = {};\r\n        config.selector.id = \"tree\";\r\n        config.selector.source = _.map(cl.codes, _.bind(function (obj) {\r\n            return {\r\n                value: obj.code,\r\n                label: obj.label[this.lang.toUpperCase()]\r\n            }\r\n        }, this));\r\n        //config.selector.hideFilter = true;\r\n\r\n        return config;\r\n\r\n    };\r\n\r\n    Utils.prototype._configDropdownFromPeriod = function (c) {\r\n\r\n        var config = {},\r\n            domain = c.domain || {},\r\n            period = domain.period;\r\n\r\n        //configure selector\r\n        //html selector configuration\r\n        config.selector = {};\r\n        config.selector.id = \"dropdown\";\r\n        config.selector.from = period.from;\r\n        config.selector.to = period.to;\r\n\r\n        return config;\r\n\r\n    };\r\n\r\n    Utils.prototype._configTreeFromPeriod = function (c) {\r\n\r\n        var config = {},\r\n            domain = c.domain || {},\r\n            period = domain.period;\r\n\r\n        //configure selector\r\n        //html selector configuration\r\n        config.selector = {};\r\n        config.selector.id = \"tree\";\r\n        config.selector.from = period.from;\r\n        config.selector.to = period.to;\r\n        //config.selector.hideFilter = true;\r\n\r\n        return config;\r\n\r\n    };\r\n\r\n    Utils.prototype._configDropdownFromTimelist = function (c) {\r\n\r\n        var config = {},\r\n            domain = c.domain || {},\r\n            timelist = domain.timeList || [],\r\n            format = this._getTimeFormat(timelist[0]);\r\n\r\n        //configure selector\r\n        config.selector = {};\r\n        config.selector.id = \"dropdown\";\r\n        config.selector.source = _.map(timelist, _.bind(function (obj) {\r\n            return {\r\n                value: obj,\r\n                label: new Moment(obj, format).format(this._getTimeLabelFormat(obj))\r\n            }\r\n        }, this));\r\n\r\n        return config;\r\n\r\n    };\r\n\r\n    Utils.prototype._configTreeFromTimelist = function (c) {\r\n\r\n        var config = {},\r\n            domain = c.domain || {},\r\n            timelist = domain.timeList || [],\r\n            format = this._getTimeFormat(timelist[0]);\r\n\r\n        //configure selector\r\n        config.selector = {};\r\n        config.selector.id = \"tree\";\r\n        config.selector.source = _.map(timelist, _.bind(function (obj) {\r\n            return {\r\n                value: obj,\r\n                label: new Moment(obj, format).format(this._getTimeLabelFormat(obj))\r\n            }\r\n        }, this));\r\n        //config.selector.hideFilter = true;\r\n\r\n        return config;\r\n\r\n    };\r\n\r\n    Utils.prototype._configDropdownFromSource = function (c) {\r\n\r\n        var config = {},\r\n            domain = c.domain || {},\r\n            codes = domain.codes,\r\n            cl;\r\n\r\n        if (!Array.isArray(codes) || codes.length > 1) {\r\n            log.warn(\"Invalid domain.codes attributes\");\r\n        }\r\n\r\n        cl = codes[0];\r\n\r\n        if (!cl.codes) {\r\n            log.error(\"Impossible to find codes\");\r\n        }\r\n\r\n        //configure selector\r\n        //html selector configuration\r\n        config.selector = {};\r\n        config.selector.id = \"dropdown\";\r\n        config.selector.source = _.map(cl.codes, _.bind(function (obj) {\r\n            return {\r\n                value: obj.code,\r\n                label: obj.label[this.lang.toUpperCase()]\r\n            }\r\n        }, this));\r\n\r\n        return config;\r\n\r\n    };\r\n\r\n    Utils.prototype._configDropdownFromCodelist = function (c) {\r\n\r\n        var config = {},\r\n            domain = c.domain || {},\r\n            codes = domain.codes,\r\n            cl;\r\n\r\n        if (!Array.isArray(codes) || codes.length > 1) {\r\n            log.warn(\"Invalid domain.codes attributes\");\r\n        }\r\n\r\n        cl = codes[0];\r\n\r\n        if (!cl.idCodeList) {\r\n            log.error(\"Impossible to find idCodeList\");\r\n        }\r\n\r\n        //configure code list\r\n        config.cl = {};\r\n        config.cl.uid = cl.idCodeList;\r\n        config.cl.version = cl.version;\r\n\r\n        //configure selector\r\n        //html selector configuration\r\n        config.selector = {};\r\n        config.selector.id = \"dropdown\";\r\n\r\n        return config;\r\n\r\n    };\r\n\r\n    Utils.prototype._configTimeFromPeriod = function (c) {\r\n\r\n        /* ~~~~~~ Selector time\r\n         var config = {},\r\n         domain = c.domain || {},\r\n         period = domain.period,\r\n         from = String(period.from),\r\n         to = String(period.to),\r\n         //from = String(period.from).substring(0, String(period.from).length - 2),\r\n         //to = String(period.to).substring(0, String(period.to).length - 2),\r\n         format = this._getTimeFormat(from);\r\n\r\n         //configure selector\r\n         config.selector = {\r\n         config: {}\r\n         };\r\n         config.selector.id = \"time\";\r\n         config.selector.config.minDate = new Moment(from, format);\r\n         config.selector.config.maxDate = new Moment(to, format);\r\n         config.selector.config.format = this._getTimeLabelFormat(from);\r\n\r\n         if (from.length < 5) {\r\n         config.selector.config.viewMode = \"years\";\r\n         }\r\n\r\n         config.format = {\r\n         output : \"time\"\r\n         };\r\n         */\r\n\r\n        var config = {},\r\n            domain = c.domain || {},\r\n            period = domain.period,\r\n            from = String(period.from),\r\n            to = String(period.to);\r\n\r\n        //configure selector\r\n        config.selector = {\r\n            config: {}\r\n        };\r\n\r\n        config.selector.id = \"tree\";\r\n        config.selector.from = parseInt(from, 10);\r\n        config.selector.to = parseInt(to, 10);\r\n        //config.selector.hideFilter = true;\r\n        config.format = {\r\n            output: \"time\"\r\n        };\r\n\r\n        return config;\r\n    };\r\n\r\n    Utils.prototype._configRangeFromPeriod = function (c) {\r\n\r\n        var config = {},\r\n            domain = c.domain || {},\r\n            period = domain.period;\r\n\r\n        //configure selector\r\n        config.selector = {\r\n            config: {}\r\n        };\r\n\r\n        config.selector.id = \"range\";\r\n        config.selector.config.min = period.from;\r\n        config.selector.config.max = period.to;\r\n        config.selector.config.type = \"double\";\r\n        config.selector.config.prettify_enabled = false;\r\n\r\n        return config;\r\n\r\n    };\r\n\r\n    Utils.prototype._configInput = function (c, o) {\r\n\r\n        var config = {\r\n            selector: {},\r\n            format: {\r\n                output: o.output || \"enumeration\"\r\n            }\r\n        };\r\n\r\n        config.selector.id = \"input\";\r\n        config.selector.type = o.type || \"text\";\r\n\r\n        return config;\r\n    };\r\n\r\n    Utils.prototype._configTemporalColumn = function (c) {\r\n\r\n        var domain = c.domain || {},\r\n            period = domain.period,\r\n            timelist = domain.timeList;\r\n\r\n        if (period && period.from && period.to) {\r\n            //return this._configRangeFromPeriod(c);\r\n            //return this._configTimeFromPeriod(c);\r\n            //return this._configDropdownFromPeriod(c);\r\n            return this._configTreeFromPeriod(c);\r\n        }\r\n\r\n        if (timelist) {\r\n            //return this._configDropdownFromTimelist(c);\r\n            return this._configTreeFromTimelist(c);\r\n        }\r\n\r\n        //Default set year range\r\n        log.warn(\"Column \" + c.id + \" set with default time period range.\");\r\n\r\n        c.domain = {\r\n            period: {\r\n                from: C.defaultPeriodFrom,\r\n                to: C.defaultPeriodTo\r\n            }\r\n        };\r\n\r\n        return this._configTimeFromPeriod(c);\r\n    };\r\n\r\n    Utils.prototype._getTimeFormat = function (s) {\r\n\r\n        var format;\r\n\r\n        switch (String(s).length) {\r\n            case 4 :\r\n                format = \"YYYY\";\r\n                break;\r\n            case 6:\r\n                format = \"YYYY MM\";\r\n                break;\r\n            case 8:\r\n                format = \"YYYY MM DD\";\r\n                break;\r\n            case 12:\r\n                format = \"YYYY MM DD hh mm\";\r\n                break;\r\n            case 14:\r\n                format = \"YYYY MM DD hh mm ss\";\r\n                break;\r\n            default:\r\n                log.warn(\"Impossible to find time format for: \" + format);\r\n        }\r\n\r\n        return format;\r\n\r\n    };\r\n\r\n    Utils.prototype._getTimeLabelFormat = function (s) {\r\n\r\n        if (this.timeLabelFormat) {\r\n            return this.timeLabelFormat;\r\n        }\r\n\r\n        var format;\r\n\r\n        switch (String(s).length) {\r\n            case 4 :\r\n                format = \"YYYY\";\r\n                break;\r\n            case 6:\r\n                format = \"L\";\r\n                break;\r\n            case 8:\r\n                format = \"L\";\r\n                break;\r\n            case 14:\r\n                format = \"lll\";\r\n                break;\r\n            default:\r\n                log.warn(\"Impossible to find time label format for: \" + format);\r\n        }\r\n\r\n        return format;\r\n\r\n    };\r\n\r\n    /*   /!* Revert Process *!/\r\n     /!**\r\n     * Extracts a blank selection from FENIX process\r\n     * default values\r\n     * @param {Object} filter\r\n     * @return {Object} filter configuration\r\n     *!/\r\n     Utils.prototype.revertProcess = function (filter) {\r\n\r\n     var configuration = {};\r\n\r\n     if (Array.isArray(filter)) {\r\n\r\n     _.each(filter, _.bind(function ( step ) {\r\n\r\n     var fn = \"_revert_\" + step.name;\r\n\r\n     if ( $.isFunction(this[fn]) && step.parameters) {\r\n     configuration[step.name] = _.extend( this[fn](step));\r\n     } else {\r\n     log.error(fn + \" is not a valid reverse function\");\r\n     }\r\n\r\n     }, this));\r\n     }\r\n\r\n     return configuration;\r\n\r\n     };\r\n\r\n     Utils.prototype._revert_filter = function (step) {\r\n     log.info(\"_revert_filter \" + JSON.stringify(step));\r\n\r\n     var self = this,\r\n     result = {},\r\n     parameters = step.parameters,\r\n     rows = parameters.rows,\r\n     columns = parameters.columns;\r\n\r\n     _.each(rows, function ( obj , key) {\r\n\r\n     if ( obj.time ) {\r\n     result[key] = self._revert_time_row(obj);\r\n     } else {\r\n     result[key] = self._revert_codes_row(obj);\r\n     }\r\n\r\n     });\r\n\r\n     return result;\r\n     };\r\n\r\n     Utils.prototype._revert_time_row = function ( step ) {\r\n\r\n     console.log(step)\r\n\r\n     };\r\n\r\n     Utils.prototype._revert_codes_row = function ( step ) {\r\n\r\n     console.log(step)\r\n\r\n\r\n     };\r\n\r\n     Utils.prototype._revert_group = function (step) {\r\n     log.info(\"_revert_group \" + JSON.stringify(step));\r\n\r\n\r\n     return;\r\n     };\r\n\r\n     Utils.prototype._revert_order = function (step) {\r\n     log.info(\"_revert_order \" + JSON.stringify(step));\r\n\r\n     return;\r\n     };\r\n     */\r\n    /* Validation */\r\n\r\n    Utils.prototype._isFenixResource = function (res) {\r\n\r\n        var valid = true,\r\n            errors = [],\r\n            resourceType = this.getNestedProperty(\"metadata.meContent.resourceRepresentationType\", res);\r\n\r\n        if (!res.hasOwnProperty(\"metadata\")) {\r\n            errors.push({code: ERR.INVALID_METADATA});\r\n            valid = false;\r\n        }\r\n\r\n        if (valid && !res.metadata.hasOwnProperty(\"dsd\")) {\r\n            errors.push({code: ERR.INVALID_DSD});\r\n            valid = false;\r\n        }\r\n\r\n        //NOT need field for FENIX GEOGRAPHIC RESOURCE\r\n        if (resourceType === \"dataset\" && valid && (!res.metadata.dsd.hasOwnProperty(\"columns\") || !Array.isArray(res.metadata.dsd.columns))) {\r\n            errors.push({code: ERR.INVALID_COLUMNS});\r\n        }\r\n\r\n        return errors.length > 0 ? errors : valid;\r\n    };\r\n\r\n    Utils.prototype._isFenixColumn = function (c) {\r\n\r\n        var valid = true,\r\n            errors = [];\r\n\r\n        if (!c.hasOwnProperty(\"dataType\")) {\r\n            errors.push({code: ERR.INVALID_COLUMN_DATATYPE});\r\n            valid = false;\r\n        }\r\n\r\n        return errors.length > 0 ? errors : valid;\r\n    };\r\n\r\n    Utils.prototype.getNestedProperty = function (path, obj) {\r\n\r\n        var obj = _.extend({}, obj),\r\n            arr = path.split(\".\");\r\n\r\n        while (arr.length && (obj = obj[arr.shift()]));\r\n\r\n        return obj;\r\n\r\n    };\r\n\r\n\r\n    Utils.prototype.assign = function (obj, prop, value) {\r\n        if (typeof prop === \"string\")\r\n            prop = prop.split(\".\");\r\n\r\n        if (prop.length > 1) {\r\n            var e = prop.shift();\r\n            this.assign(obj[e] =\r\n                    Object.prototype.toString.call(obj[e]) === \"[object Object]\"\r\n                        ? obj[e]\r\n                        : {},\r\n                prop,\r\n                value);\r\n        } else {\r\n            obj[prop[0]] = value;\r\n        }\r\n    };\r\n\r\n    Utils.prototype.getNestedProperty = function (path, obj) {\r\n\r\n        var obj = _.extend({}, obj),\r\n            arr = path.split(\".\");\r\n\r\n        while (arr.length && (obj = obj[arr.shift()]));\r\n\r\n        return obj;\r\n\r\n    };\r\n\r\n\r\n    return new Utils();\r\n\r\n\r\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/index.js\n// module id = 1\n// module chunks = 0","if (typeof define !== 'function') {\r\n    var define = require('amdefine')(module);\r\n}\r\n\r\ndefine(function ( ) {\r\n\r\n    'use strict';\r\n\r\n    var prefix = \"\";\r\n\r\n    return {\r\n\r\n        //Utils\r\n        INVALID_FENIX_RESOURCE: prefix + \"invalid_fenix_resource\",\r\n        INVALID_METADATA: prefix + \"invalid_metadata\",\r\n        INVALID_DSD: prefix + \"invalid_dsd\",\r\n        INVALID_COLUMNS: prefix + \"invalid_dsd\",\r\n        INVALID_FENIX_COLUMN: prefix + \"invalid_fenix_column\",\r\n        INVALID_COLUMN_DATATYPE : prefix + \"invalid_column_datatype\",\r\n        UNKNOWN_FENIX_COLUMN_DATATYPE :prefix + \"unknown_fenix_column_datatype\",\r\n\r\n    };\r\n});\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/config/errors.js\n// module id = 2\n// module chunks = 0","if (typeof define !== 'function') {\r\n    var define = require('amdefine')(module);\r\n}\r\n\r\ndefine(function () {\r\n\r\n    'use strict';\r\n\r\n    return {\r\n\r\n        forbiddenSubjects: [\"value\"],\r\n        exclude: [], //exclude id\r\n        common: {},\r\n        lang: 'EN',\r\n        defaultPeriodFrom: 1970,\r\n        defaultPeriodTo: 2017\r\n\r\n    }\r\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/config/config.js\n// module id = 3\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_4__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"jquery\"\n// module id = 4\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_5__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"underscore\"\n// module id = 5\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_6__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"loglevel\"\n// module id = 6\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_7__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"handlebars\"\n// module id = 7\n// module chunks = 0","module.exports = __WEBPACK_EXTERNAL_MODULE_8__;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"moment\"\n// module id = 8\n// module chunks = 0"],"sourceRoot":""}